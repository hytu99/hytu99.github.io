<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【机器学习笔记】4. Support Vector Machine &amp; Lagrange Duality</title>
      <link href="/ml-svm/"/>
      <url>/ml-svm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>整理自同学的笔记</p></blockquote><h3 id="Support-Vector-Machine"><a href="#Support-Vector-Machine" class="headerlink" title="Support Vector Machine"></a>Support Vector Machine</h3><p>Training data: $ \{ (\mathbf{\mathbf{x}}_i, y ) \} _ {i=1} ^ n$,  $y_i \in \mathcal{C} = \{ -1, 1 \}$.</p><p>Aim: $f(\mathbf{\mathbf{x}}, \mathbf{w}, b) = b + \sum_{j=1}^d w_j x_j$, s.t. $y_i = \text{sign}(f(\mathbf{\mathbf{x}}_i, w, b))$</p><h4 id="SVM-for-linear-separable-data"><a href="#SVM-for-linear-separable-data" class="headerlink" title="SVM for linear separable data"></a>SVM for linear separable data</h4><p><strong>Definition:</strong> A training sample is linear separate if there exists $(\hat{\mathbf{w}}, \hat{b})$, s.t. $y_i = \text{sign}  (f(\mathbf{\mathbf{x}}_i, \hat{\mathbf{w}}, \hat{b}))$, $\forall i \in [n] = \{1, 2, \cdots, n \}$, which is equivalent to $y_i f(\mathbf{\mathbf{x}}_i, \hat{\mathbf{w}}, \hat{b}) &gt; 0$, $\forall i \in [n]$.</p><img src="svm_1.jpg" width="400" height="400" alt="SVM示意图" align="center"><p>点$\mathbf{\mathbf{x}}_i$到线$ \langle {\bf w}, \mathbf{\mathbf{x}} \rangle + b = 0$的距离$d(\mathbf{\mathbf{x}}_i;\mathbf{w},b) = \dfrac{y_i(\langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b)}{\Vert \mathbf{w} \Vert_2}$.</p><p>$$<br>\max \limits _ {\mathbf{w}, b} \min \limits _ {\mathbf{\mathbf{x}} _ i \in D} margin(\mathbf{w}, b, D) = \max \limits_{\mathbf{w}, b} \min \limits _ {\mathbf{\mathbf{x}} _ i \in D } d(\mathbf{\mathbf{x}} _ i) = \max \limits _ {\mathbf{w}, b} \min \limits _ {\mathbf{\mathbf{x}} _ i \in D}  \dfrac{y_i( \langle\mathbf{w}, \mathbf{\mathbf{x}} _ i \rangle+ b)}{\Vert \mathbf{w} \Vert _ 2}<br>$$</p><p><strong>Assumption 1:</strong> Training sample $D = \{ (\mathbf{\mathbf{x}}_i, y_i) \} $, is linear separable.</p><p><strong>Definition:</strong> </p><p>The geometric margin $\gamma_f (\mathbf{z})$ of a linear classifier $f({\bf \mathbf{x}},{\bf w}, b) = \langle {\bf w}, {\bf \mathbf{x}} \rangle + b$ at a point $\mathbf{z}$ is its sigmoid Euclidean Distance to the hyperplane $ \{ \mathbf{\mathbf{x}}  :   \langle {\bf w}, {\bf \mathbf{x}} \rangle + b = 0\}$.<br>$$<br>\gamma_f (\mathbf{z})= \dfrac{y_i(\langle \mathbf{w}, \mathbf{z}_i \rangle + b)}{\Vert \mathbf{w} \Vert_2}<br>$$</p><p>The geometric margin $\gamma_f$ of a linear classifier $f$ for sample $S = \{ {\bf \mathbf{x}}_1, \cdots, {\bf x_n} \}$ is the minimum margin over the points in the sample. </p><p>$$<br>\gamma_f = \min \limits_{i \in [n]} \gamma_f ({\bf \mathbf{x}}_i)<br>$$</p><h4 id="Maximum-Margin-Classifier"><a href="#Maximum-Margin-Classifier" class="headerlink" title="Maximum Margin Classifier"></a>Maximum Margin Classifier</h4><p>$$<br>\max \limits_ { {\bf w}, b} \gamma_f = \max \limits_ { {\bf w}, b} \left \{ \frac{1}{\Vert \mathbf{w} \Vert} \min \limits_{i \in [n] } y _ i( \langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b) \right \}<br>$$</p><p>即</p><p>$$<br>\max \limits _ { {\bf w}, b} \frac{1}{\Vert {\bf w} \Vert},  \\<br>\text{s.t. } \min \limits _ {i \in [n]} y _ i( \langle \mathbf{w}, \mathbf{\mathbf{x}} _ i \rangle + b) = 1  \\<br>\Rightarrow y _ i( \langle \mathbf{w} , \mathbf{\mathbf{x}} _ i \rangle + b) \ge 1 \\<br>\Rightarrow \min \limits_{ {\bf w}, b} \frac{1}{2} \Vert {\bf w} \Vert ^ 2<br>$$</p><p>用反证法可证等号可以取到。</p><p><strong>Definition:</strong> Given a SVM classifier $\langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b = 0$, the marginal hyperplanes are determined by $\vert \langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b \vert  = 1$. The support vectors are the data instance on the marginal hyperplanes. （ i.e. $ \{  {\bf \mathbf{x}}_i  : | \langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b \vert  = 1 , {\bf \mathbf{x}}_i \in S \} $ ）</p><h4 id="Not-separable"><a href="#Not-separable" class="headerlink" title="Not separable"></a>Not separable</h4><p>minimize $\frac{1}{2} \Vert {\bf w} \Vert ^ 2 + C(training \ errors)$</p><p>minimize  $\frac{1}{2} \Vert {\bf w} \Vert ^ 2 + C(distance \ of\ the \ error \  points \ and \ its \ correct \ position)$</p><p>SVM for non-separate cases:</p><p>$$<br>\min \limits _ { {\bf w}, b, \epsilon} \frac{1}{2} \Vert \mathbf{w} \Vert + C \sum _ {i=1} ^ {n} \epsilon_i, \\<br>\text{s.t. } y_i (\langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b) \ge 1 - \epsilon_i, i \in [n] \\  \epsilon_i \ge 0, i \in [n]<br>$$</p><h3 id="Lagrange-Duality"><a href="#Lagrange-Duality" class="headerlink" title="Lagrange Duality"></a>Lagrange Duality</h3><p>Consider the problem:</p><p>$$<br>\begin{align}<br>\min f(\mathbf{x}) \tag{1} \\<br>\text{s.t. } g_i(\mathbf{x}) &amp; \le 0, i = 1,\cdots,m \\<br>h_i(\mathbf{x}) &amp; = 0, i = 1,\cdots, p \\<br>\mathbf{x} &amp; \in X<br>\end{align}<br>$$</p><p>$f$, $g_i$, $h_i$ are all continously differentiable.</p><p>$$<br>g(\mathbf{x}) = \left [<br>\begin{matrix}<br>g_1(\mathbf{x}) \\<br>\vdots \\<br>g_m(\mathbf{x})<br>\end{matrix}<br>\right],<br>h(\mathbf{x}) = \left [<br>\begin{matrix}<br>h_1(\mathbf{x}) \\<br>\vdots \\<br>h_p(\mathbf{x})<br>\end{matrix}<br>\right]<br>$$</p><p>Feasible Set: $D = \{  \mathbf{x}  :  g(\mathbf{x}) \le 0 , h(\mathbf{x}) = 0, \mathbf{x} \in X \}$.</p><p>Each $\mathbf{x} \in D$ is called a feasible solution. The optimal function value is $f^* = \inf \limits _ { \mathbf{x} \in D } f(\mathbf{x})$.</p><hr><p>Transition from the domain to the image $S = \{ (g(\mathbf{x}), h(\mathbf{x}), f(\mathbf{x}))  :  \mathbf{x} \in X \}$ （$\dim =m + p + 1 $）</p><p><strong>Definition 1:</strong> Associated with the primal problem, we define the Lagrangian $L$: $\mathbb{R}^n \times \mathbb{R} ^ m \times \mathbb{R} ^ p \rightarrow \mathbb{R}$.<br>$$<br>L(\mathbf{\mathbf{x}}, \lambda, \mu) = f(\mathbf{\mathbf{x}}) + \sum _ {i = 1} ^ m \lambda_i g_i(\mathbf{\mathbf{x}}) + \sum _ {i = 1} ^ p \mu_i h_i(\mathbf{\mathbf{x}})<br>$$</p><p><strong>Definition 2:</strong> A vector $ ( \lambda ^ *, \mu ^ *) = (\lambda _ 1 ^ *, \cdots, \lambda_m ^ *, \mu_1 ^ *, \cdots, \mu_p ^ *)$  is said to be a geometric multiplier vector（or simply geometric multiplier）for the primal problem if:<br>$$<br>\lambda_i ^ * \ge 0, i = 1, \cdots, m \text{ and } f ^ * = \inf _ {\mathbf{x} \in X} L(\mathbf{\mathbf{x}}, \lambda ^ *, \mu ^ *)<br>$$</p><p><strong>Lemma（Visualization Lemma）:</strong> </p><ol><li>The hyperplane with normal $(\lambda, \mu, 1)$ that pass through $(g(\mathbf{\mathbf{x}}), h(\mathbf{\mathbf{x}}), f(\mathbf{\mathbf{x}}))$ intercepts the vertical axis $\{ (\mathbf{0}, z), z \in \mathbb{R} \}$ at the level $L(\mathbf{\mathbf{x}}, \lambda, \mu)$.</li><li>Among all hyperplanes with normal $(\lambda, \mu, 1)$ that contains in their positive half space the set $S$, the highest attained level of interception of the vertical axis is $\inf \limits_ {\mathbf{x} \in X} L(\mathbf{\mathbf{x}}, \lambda, \mu)$.</li></ol><p><strong>Proposition:</strong> Let $(\lambda ^ *, \mu ^ *)$ be a geometric multiplier. Then $\mathbf{\mathbf{x}} ^ *$ is a global minimum of the primal problem iff $\mathbf{\mathbf{x}} ^ * \in \arg \min \limits _ {\mathbf{\mathbf{x}} \in X} L(\mathbf{\mathbf{x}}, \lambda ^ *, \mu ^ *)$, $ \lambda _ i ^ * g _ i(\mathbf{\mathbf{x}} ^ *) = 0$, $  i = 1, \cdots, m$（complementary slackness）.</p><p><strong>Proof:</strong></p><p>（$\Rightarrow$）</p><p>Suppose $\mathbf{x} ^ *$ is a global minimum. Then $\mathbf{x} ^ *$ must be feasible, and thus</p><p>$$<br>f(\mathbf{x} ^ *) \ge L(\mathbf{x} ^ *, \lambda ^ *, \mu ^ *) \ge f ^ * = f(\mathbf{x} ^ *) + \sum _ {i = 1} ^ m \lambda_i g _ i(\mathbf{x} ^ *) + \sum _ {i = 1} ^ p \mu_i h _ i(\mathbf{x} ^ *)<br>$$</p><p>The definition of $ f  ^ * $ leads to $ f ^ * = f(\mathbf{x} ^ * )  $, which implies that </p><p>$$<br>f ( \mathbf{x} ^ * ) = L (\mathbf{x} ^ * ) = f ^ *  = \inf \limits  _ {\mathbf{x} \in \mathcal{X} } L (\mathbf{x}, \lambda ^ *, \mu ^ *) \\<br>\Rightarrow \mathbf{x} ^ * = \arg \min \limits _ {\mathbf{x} \in X} L(\mathbf{x}, \lambda ^ *, \mu ^ *) \text{ and } f ( \mathbf{x} ^ *) = L(\mathbf{x} ^ *) = f(\mathbf{x} ^ *) + \sum _ {i = 1} ^ m \lambda_i g _ i(\mathbf{x} ^ *) + \sum _ {i = 1} ^ p \mu_i h _ i(\mathbf{x} ^ *) \\<br>\Rightarrow \lambda _ i ^ * g _ i(\mathbf{x} ^ *) = 0<br>$$</p><p>（$\Leftarrow$）<br>$$<br>f (\mathbf{x} ^ * ) = L(\mathbf{x} ^ *, \lambda ^ *, \mu ^ *) \le L(\mathbf{x} , \lambda ^ *, \mu ^ *) =  f(\mathbf{x}) + \sum _ {i = 1} ^ m \lambda_i g _ i(\mathbf{x} ^ *) + \sum _ {i = 1} ^ p \mu_i h _ i(\mathbf{x} ^ *) \le f(\mathbf{x})<br>$$</p><p><strong>Lagrange Duality:</strong></p><p>Lagrange Dual Function: $ q(\lambda, \mu) = \inf \limits_ {\mathbf{x} \in X} L (\mathbf{x}, \lambda, \mu)$.</p><p>Lagrange Dual Problem: $\max q(\lambda, \mu)$, s.t. $\lambda \ge 0$.</p><p>Dual optimal value: $q ^ * = \sup \limits _ { \{ (\lambda, \mu)  :  \lambda \ge 0 \} } q (\lambda, \mu)$</p><p>$\text{dom } q = \{ (\lambda, \mu)  :  q(\lambda, \mu) &gt; - \infty \}$</p><p><strong>convex:</strong></p><ol><li>$\text{dom } q \cap \{ (\lambda, \mu)  :  \lambda \ge 0 \} $ is convex.</li><li>$-q$ is convex. （$f(\mathbf{x}) = \sup \limits_ {y \in \cal{Y}}l(\mathbf{x},y)$, $l(\mathbf{x},y)$ is convex $\Rightarrow f(\mathbf{x})$ is convex）</li></ol><p><strong>Theorem（Week Duality Theorem）:</strong> $q ^ * \le f ^ *$</p><p><strong>Proof:</strong> $\forall (\lambda, \mu), q(\lambda, \mu) = \inf \limits _ {\mathbf{x} \in X} L(\mathbf{x}, \lambda, \mu) \le \inf \limits _ {\mathbf{x} \in D} L(\mathbf{x}, \lambda, \mu) \le f ^ *$</p><hr><p><strong>Definition:</strong> Consider $f: X \rightarrow Y$</p><ol><li><p>The value $f(x) \in Y$ that it assumes at element $ x  \in X$ is called the image of $x$.</p></li><li><p>The image of a set $A \subset X$ under the mapping $f$ is $f(A) = \{ y \in Y  :  \exists x \in A, \text{s.t. } f(x) = y  \}$.</p></li><li><p>The preimage of as set $B \subset Y$ is $f ^ {-1} (B) := \{ x \in X : f(x) \in B \}$</p><p>eg: $f(X) = \det (A)$, $f(x ^ 2) = 2 x $ .</p></li></ol><p><strong>Definition:</strong> A hyperplane $H$ in $ \mathbb{R} ^ {d +1}$ is specified by a linear equation involving a nonzero vector $(\mathbf{u}, u_0)$ （called the normal vector of $H$）, where $\mathbf{u} \in  \mathbb{R} ^ d$ and $u_0 \in \mathbb{R}$ and by a constraint $C$ as follows:<br>$$<br>H = \{ ({\bf w}, z) : {\bf w} \in \mathbb{R} ^ d, z \in \mathbb{R}, u_0 z + \langle \mathbf{u}, \mathbf{w} \rangle = C \}<br>$$</p><p>Hyperplane defines two half-spaces: the positive half-space $H ^ + = \{ ({\bf w}, z) : {\bf w} \in \mathbb{R} ^ d, z \in \mathbb{R}, u_0 z + \langle \mathbf{u}, \mathbf{w} \rangle \ge  C \}$ and the negative half-space $H ^ + = \{ ({\bf w}, z) : {\bf w} \in \mathbb{R} ^ d, z \in \mathbb{R}, u_0 z + \langle \mathbf{u}, \mathbf{w} \rangle \le  C \}$.</p><p>$$<br>l({\bf w}, z) = u_0 z +  \langle \mathbf{u}, \mathbf{w} \rangle  \\<br>$$</p><p><img src="pic2.jpg" alt=""></p><p><strong>Definition:</strong> Duality gap is $f ^ * - q ^ *$.</p><p><strong>Proposition:</strong> </p><ol><li><p>If there is no duality gap, the set of geometric multipliers is equal to the set of optimal dual solution.</p></li><li><p>If there is duality gap, the set of geometric multipliers is empty.</p></li></ol><p><strong>Optimality conditions:</strong> </p><p>A pair $\mathbf{\mathbf{x}} ^ * $ and $  ( \lambda ^ * , \mu ^ * ) $ is an optimal solution and geometric multiplier iff </p><p>$$<br>\mathbf{x} ^ * \in X, g(\mathbf{x} ^ *) \le 0, h(\mathbf{x} ^ * ) = 0. \text{(Primal Feasibility)} \\<br>\lambda ^ * \ge 0  \text{(Dual Feasibility)} \\<br>\mathbf{x} ^ * \in \arg \min \limits_ {\mathbf{x} \in X} L(\mathbf{x}, \lambda ^ *, \mu ^ *) \text{(Lagrangian Optimality )} \\<br>\lambda _ i ^ * g _ i ^ * (\mathbf{x}) = 0, i = 1,\cdots,m \text{(Complementary Slackness)}<br>$$</p><p><strong>Saddle Point Theorem:</strong></p><p>A pair $\mathbf{\mathbf{x}} ^ * $ and $  ( \lambda ^ * , \mu ^ * ) $ is an optimal solution and geometric multiplier iff $\mathbf{\mathbf{x}} ^ * \in X$, $\lambda ^ * \ge 0$ and $(\mathbf{\mathbf{x}} ^ *, \lambda ^ *, \mu ^ * ) $ is a saddle point of the Lagrangian. i.e.</p><p>$$<br>L((\mathbf{\mathbf{x}} ^ *, \lambda, \mu) \le L(\mathbf{\mathbf{x}} ^ *, \lambda ^ *, \mu ^ * ) \le (\mathbf{\mathbf{x}}, \lambda ^ *, \mu ^ * ) ), \forall \mathbf{\mathbf{x}} \in X, \lambda \ge 0<br>$$</p><p><strong>Strong Duality Theorem:</strong></p><p>Consider the primal problem. Suppose that $f$ is convex , $X$ is a polyhedral, i.e. $X = \{ {\bf \mathbf{x}}:  \langle {\bf a} _ i, {\bf \mathbf{x}} \rangle  \le b, i = 1, \cdots, r \} $, $g_i$ and $h_i$ are linear and $f ^ * $ is finite. Then there is no duality gap and there exists at least one geometric multiplier （primal and dual problems have optimal solutions）.</p><h3 id="SVM-amp-SVM-Dual"><a href="#SVM-amp-SVM-Dual" class="headerlink" title="SVM &amp; SVM Dual"></a>SVM &amp; SVM Dual</h3><p><strong>SVM:</strong></p><p>$$<br>\min _ {\mathbf{w}, b} \frac{1}{2} \Vert {\bf w} \Vert ^ 2 + C \sum _ {i = 1} ^ n \epsilon_i \\<br>\text{s.t. } y_i ( \langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b) \ge 1 - \epsilon_i, i = 1, \cdots, n \\<br>\epsilon_i \ge 0, i = 1, \cdots, n<br>$$</p><p>$$<br>L(\mathbf{w}, b, \epsilon, \alpha, u) = \frac{1}{2} \Vert \mathbf{w} \Vert ^ 2 + C \sum _ {i = 1} ^ n \epsilon_i + \sum _ {i = 1} ^ n \alpha _ i (1 - \epsilon _ i - y_i ( \langle \mathbf{w}, x_i \rangle + b) ) - \sum _ {i = 1} ^ n u_i \epsilon_i, \alpha \ge 0, u \ge 0<br>$$</p><p>$$<br>\begin{align}<br>q(a, u)  = &amp; \inf _ {\mathbf{w}, b, \epsilon} L(b, \epsilon, \alpha, u) \\<br>= &amp; \inf _ {\mathbf{w}} \frac{1}{2} \Vert {\bf w} \Vert ^ 2 - \sum _ {i = 1} ^ n \alpha _ i  y_i \langle \mathbf{w},  \mathbf{\mathbf{x}}_i \rangle  \\ &amp; + \inf _ {b}  b  \sum _ {i = 1} ^ n  \alpha _ i y _ i \\ &amp; + \inf _ {\epsilon} \sum _ {i = 1} ^ n (C - \alpha _ i - u _ i) \epsilon_i<br>\end{align}<br>$$</p><p>$$<br>\begin{align}<br>\left. \nabla_\mathbf{w} L(\mathbf{w}, b, \epsilon, \alpha, u)  \right| _ {\mathbf{w} = \mathbf{\hat{w}}} = 0 &amp; \Rightarrow \mathbf{\hat{w}} - \sum _ {i = 1} ^ n \alpha _ i y _i \mathbf{\mathbf{x}} _ i - 0 \\<br>\left. \nabla_b L(\mathbf{w}, b, \epsilon, \alpha, u)  \right| _ {b = \hat{b}} = 0 &amp; \Rightarrow - \sum _ {i = 1} ^ n \alpha_i y _i = 0 \\<br>\left. \nabla_\epsilon L(\mathbf{w}, b, \epsilon, \alpha, u)  \right| _ {\epsilon = \hat{\epsilon}} = 0 &amp; \Rightarrow C - \alpha_i - u _ i = 0<br>\end{align}<br>$$</p><p>$$<br>\max q(\alpha, u) = - \frac{1}{2} \sum _ {i =1} ^ n \sum _ {j = 1} ^ n \alpha_i \alpha_j y_i y _ j \langle {\bf \mathbf{x}} _ i, {\bf \mathbf{x}} _ j \rangle + \sum _ {i = 1} ^ n \alpha _ i \\<br>\text{s.t. }  \sum _ {i = 1} ^ n \alpha_i y _i = 0 , \alpha _ i \ge 0 \\<br> C - \alpha_i - u _ i = 0, u_i \ge 0<br>$$</p><p><strong>SVM Dual:</strong></p><p>$$<br>\max q(\alpha)<br>\text{s.t. } \sum _ {i = 1} ^ n \alpha _ i y _ i = 0 \\<br>\alpha _ i \in [0, C], i = 1, \cdots, n<br>$$</p><p><strong>Proposition:</strong></p><p>Let $\alpha ^ * $ be one of the dual optimal solutions.</p><p>$$<br>\mathbf{w} ^ * = \sum _ {i = 1} ^ n \alpha _ i ^ * y _ i \mathbf{\mathbf{x}} _ i \\<br> \alpha _ i (1 - \epsilon _ i - y_i ( \langle \mathbf{w}, \mathbf{\mathbf{x}}_i \rangle + b) ) = 0, \forall i \text{(Complementary Slackness)}<br>$$</p><p>$ \alpha _ k ^ * $ is one of the entries of $\alpha ^ *$ and $ \alpha _ k ^ * \in (0, C) $, then:</p><p>$$<br>(1 - \epsilon _ i - y_i ( \langle \mathbf{w}, x_i \rangle + b) ) = 0 \\<br>\alpha _ k ^ * \in (0, C) \Rightarrow u_k ^ * \in (0, C) \Rightarrow \epsilon _ k ^ * = 0 \\<br>b ^ * = y _ k - \langle {\bf w} ^ *, {\bf \mathbf{x} _ k} \rangle<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习笔记】3. Naive Bayes &amp; Logistic Regression</title>
      <link href="/ml-naive-bayes/"/>
      <url>/ml-naive-bayes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>整理自同学的笔记。<br>监督学习是指有目标变量或预测目标的机器学习方法，包括分类和回归。</p></blockquote><h3 id="分类中的朴素贝叶斯方法（Naive-Bayes-Classifier"><a href="#分类中的朴素贝叶斯方法（Naive-Bayes-Classifier" class="headerlink" title="分类中的朴素贝叶斯方法（Naive Bayes Classifier)"></a>分类中的朴素贝叶斯方法（Naive Bayes Classifier)</h3><p>以垃圾邮件的分类（Span Detecor）为例。</p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>对于训练过的模型，给定${\bf x}$，给出$P(spam|{\bf x})$。</p><p>训练数据记作$ \{ \mathbf{x} _ i,   y _ i \} $， $y_i \in {\mathcal C} = \{spam, not \_ spam \} $。</p><p>eg: spam email: laptop with the lowest price.</p><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><ol><li><p>属性值$x_i$条件独立于标签值，即<br>$$<br>P(x_1, x_2, \cdots ,x_{| \cal{X} |}|{\mathcal C}) = \prod_i P(x_i | {\mathcal C })<br>$$</p><p>以垃圾邮件分类为例，该问题中的样本${\bf x}_i$ 为表征邮件属性的矢量（比如词向量），表示邮件的整体特征。如果不考虑这一假设，在通常的采样中对$P({\bf x}|c)$的估计往往会导出很小的值（不容易找到两封一样的邮件）。</p><p>而这一假设为我们带来的好处则是摆脱了属性捆绑的桎梏，将单个属性作为统计与概率估计的原子单位，既提高了对数据的利用率也有效地降低了模型需要的参数数目。当然这以真实性为代价。</p></li><li><p>属性值的分布独立于其出现的位置：</p><p>$$<br>P(x_i = w_k|c) = P(x_j=w_k|c),\forall i\not=j<br>$$</p><p>亦即：</p><p>$$<br>P(x_i = w_k|c) = P(w_k|c),\forall i<br>$$</p><p>这一条件是我们脱离了对邮件长度与位置的依赖，估计中我们就只需要考虑词频，进一步降低了估计参数的数目和复杂度。</p></li></ol><h4 id="理论依据（贝叶斯定理）"><a href="#理论依据（贝叶斯定理）" class="headerlink" title="理论依据（贝叶斯定理）"></a>理论依据（贝叶斯定理）</h4><p>$$<br>\begin{align}<br>{\hat y} &amp;= \arg \max _ {c \in {\mathcal C} } P(c | {\bf x} ) \\<br>&amp;= \arg \max _ {c \in {\mathcal C} } \frac{P({\bf x}|c) P(c) } {P({\bf x} ) } \\<br>&amp;= \arg \max _ {c \in {\mathcal C} } P({\bf x}|c)P(c) \\<br>&amp;= \arg \max _ {c \in {\mathcal C} } P(c) \prod_i P(x_i | c)  \ (assumption \ 1)  \\<br>&amp;= \arg \max _ {c \in {\mathcal C} } P(c) \prod_k P(w_k|c) ^ {t _ k} \ (assumption \ 2) \\<br>\end{align}<br>$$</p><p>其中的$P(c)$为先验概率，从采样数据中估计。使先验概率更接近真实分布这一点对采样的多样性提出了一定的要求。</p><p>最后的$P(w _ k|c)$可以用表示$P(w_k|c) = \dfrac{n_{ck}}{n_c}$,其中$n_c=\sum_{i : y=c} | x _ i| $表示c类出现的次数，$n_{ck}$表示c类中词$w_k$出现的次数。但是注意到如果在采样中只要有$n_{c k}=0$,那在估计中就一定会有$P(w_k|c)=0$,这在实际中并不是合理的。为了解决这种问题，有一种方案是Laplace Smoothing:</p><p>$$<br>P(w_k|c) = \frac{n_{c k} + 1} {n _ c + | \mathcal{V} | }<br>$$</p><h4 id="朴素贝叶斯分类器训练（Training-Naive-Bayes-Classifier）"><a href="#朴素贝叶斯分类器训练（Training-Naive-Bayes-Classifier）" class="headerlink" title="朴素贝叶斯分类器训练（Training Naive Bayes Classifier）"></a>朴素贝叶斯分类器训练（Training Naive Bayes Classifier）</h4><p>$$<br>\begin{align}<br>&amp;\text{Input: trainning samples } {\mathcal D} = \{ ({\bf x_i},y_i) \} \\<br>&amp; {\mathcal V} \leftarrow \text{the set of distinct words and other tokens in }  {\mathcal D} \\<br>&amp; \text{for each target value } c \in {\mathcal C}, \text{ do} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~  {\mathcal D_c} \leftarrow \text{the training samples whose labels are c} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ P(c) \leftarrow \dfrac{|{\mathcal D_c}|}{|{\mathcal D}|} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ T_c \leftarrow \text{a single document by concentrating all training samples in } \mathcal{D} _ c \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ n_c \leftarrow |T_c| \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ \text{for } w_k \in \cal{V} \text{ do} \\<br>&amp;  ~ ~ ~ ~ ~ ~ ~ ~  ~ ~ ~ ~ ~ ~ ~ ~ n_{ck} \leftarrow  \text{the number of times the word } w_k  \text{ occurs in } T_c \\<br>&amp;  ~ ~ ~ ~ ~ ~ ~ ~  ~ ~ ~ ~ ~ ~ ~ ~ P(w_k|c) = \dfrac{n _ {ck} + 1}{n_c+ | \mathcal{V} | } \\<br>&amp;  ~ ~ ~ ~ ~ ~ ~ ~ \text{endfor} \\<br>&amp; \text{endfor}<br>\end{align}<br>$$</p><p>所谓训练，就是计算$P(w_k|c)$的表罢了。</p><h4 id="朴素贝叶斯分类器测试（Testing-Naive-Bayes-Classifier）"><a href="#朴素贝叶斯分类器测试（Testing-Naive-Bayes-Classifier）" class="headerlink" title="朴素贝叶斯分类器测试（Testing Naive Bayes Classifier）"></a>朴素贝叶斯分类器测试（Testing Naive Bayes Classifier）</h4><p>$$<br>\begin{align}<br>&amp; \text{Input: A new sample } {\bf x}, \text{ 设} x_i \text{是} {\bf x}  \text{的第 i 个属性}, I = \emptyset \\<br>&amp; \text{for } x_1, \cdots, x_i \text{ do} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ \text{if } \exists w_k \in \mathcal{V} \text{ such that } w_k = x_i, \text{ then} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ I \leftarrow I \cup k \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ \text{end if} \\<br>&amp; \text{end for} \\<br>&amp; \text{predict the label of } \mathbf{x} \text{ by } \hat y= \arg \max_{c \in {\mathcal C}}P(c) \prod _ { i \in I} P(w_i|c)<br>\end{align}<br>$$</p><p>这个算法虽然简单，但是好用。</p><h4 id="算法性能的衡量指标"><a href="#算法性能的衡量指标" class="headerlink" title="算法性能的衡量指标"></a>算法性能的衡量指标</h4><ol><li><p>准确率（Accuracy)<br>$$<br>\text{Accuracy} = \frac{\text{ # correctly predicted samples} } {\text{ # total samples} }<br>$$<br>这个指标并不适用于一般情景，它忽略了两种分类错误的不同风险。</p></li><li><p>查准率（Precision)、召回率（Recall）、F-score：</p><table><thead><tr><th></th><th>T（正确）</th><th>F（错误）</th><th>总计</th></tr></thead><tbody><tr><td>P（正例）</td><td>TP</td><td>FP（第一类错误， 假正例）</td><td>正例总数</td></tr><tr><td>N（反例）</td><td>TN</td><td>FN（第二类错误， 假反例）</td><td>反例总数</td></tr><tr><td>总计</td><td>预测正确总数</td><td>预测错误总数</td><td>样例总数</td></tr></tbody></table><p>则<br>$$<br>\begin{align}<br>&amp; \text{Precision} = \frac{TP}{TP+FP} \\<br>&amp; \text{Recall} = \frac{TP}{TP+FN}  \\<br>&amp; F_1 = \dfrac{2}{\dfrac{1}{\text{Precision} } + \dfrac{1}{\text{Recall} } }<br>\end{align}<br>$$</p></li></ol><h3 id="逻辑斯谛回归（Logistic-Regression"><a href="#逻辑斯谛回归（Logistic-Regression" class="headerlink" title="逻辑斯谛回归（Logistic Regression)"></a>逻辑斯谛回归（Logistic Regression)</h3><h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><p>给定集合$ \{ ({\bf x}_i, y_i \} ^ n _ {i=1} $, 其中$y_i \in \{0,1\}$,寻找映射：<br>$$<br>f:X\rightarrow Y, where\ X=(X_1,\cdots,X_d)\ and\ Y\in\{0,1\}<br>$$</p><h4 id="基本假设："><a href="#基本假设：" class="headerlink" title="基本假设："></a>基本假设：</h4><ol><li>$Y \sim Bern(P)$, $Y$ 服从伯努利二项分布，$P(Y=1) = p$.</li><li>$X = (X_1,\cdots,X_d)$中的$X_j$是连续随机变量。</li><li>高斯分布: $P(X_j|Y=0)\sim N(\mu _ {j0}, \sigma _ j^2),P(X_j|Y=1)\sim  N(\mu _ {j1},\sigma_j^2)$</li><li>$X_i, X_j$条件独立于$Y$, $\forall i\not=j$.</li></ol><h4 id="理论依据："><a href="#理论依据：" class="headerlink" title="理论依据："></a>理论依据：</h4><p>综上,</p><p>$$<br>\begin{align}<br>P(Y=0|X) &amp;= \dfrac{P(X|Y=0)P(Y=0)}{P(X|Y=0)P(Y=0)+P(X|Y=1)P(Y=1) }<br>\\ &amp;= \dfrac{1}{1+\dfrac{P(X|Y=1)P(Y=1)}{P(X|Y=0)P(Y=0)} }<br>\\ &amp;= \dfrac{1}{1+\exp (\ln (\dfrac{P(X|Y=1)P(Y=1)}{P(X|Y=0)P(Y=0) } ) ) }<br>\\ &amp;= \dfrac{1}{1+ \exp(\sum_j \ln (\dfrac{P(X_j|Y=1)}{P(X_j|Y=0)})+ \ln \dfrac{p}{1-p})} (assumption\ 4)<br>\end{align}<br>$$</p><p>而</p><p>$$<br>\begin{align}<br>\sum_j \ln (\frac{P(X_j|Y=1)}{P(X_j|Y=0)}) &amp;= \sum_j \ln (\frac{\exp (-\dfrac{(X_j-\mu_{j1}) ^ 2}{2\sigma_j ^ 2})}{\exp (-\dfrac{(X_j-\mu_{j0}) ^ 2}{2 \sigma_j^2})})(assumption\ 3)<br>\\ &amp;= \sum_j\dfrac{\mu_{j1}-\mu_{j0}}{\sigma_j^2}X_j+\sum_j\frac{\mu_{j0}^2-\mu_{j1}^2}{2\sigma_j^2}<br>\end{align}<br>$$<br>将其带回原式，<br>$$<br>\begin{align}<br>P(Y=0|X) &amp;= \frac{1}{1+ \exp (\sum_j \dfrac{\mu_{j1}-\mu_{j0} }{\sigma_ j^ 2} X_j + \sum_j \dfrac{\mu_{j0}^ 2- \mu_ {j1}^ 2} {2 \sigma_ j^ 2}+ \ln \dfrac{p}{1-p})}<br>\\  &amp;= \frac{1}{1+ \exp (\sum_j w_j X_j + w_0)}<br>\end{align}<br>$$<br>于是又有<br>$$<br>\begin{align}<br>P(Y=1|X) &amp;= \frac{\exp(\sum_jw_jX_j+w_0)}{1+ \exp(\sum_jw_jX_j+w_0)}<br>\end{align}<br>$$<br>可见决策平面$\sum_jw_jX_j+w_0=0$是线性的。当找到决策平面时，该分类问题就会迎刃而解。而下一步，我们就需要找出需要的权向量${\bf w}$。</p><p><strong>采用最大似然估计法：</strong><br>$$<br>\begin{align}<br>\hat {\bf w} &amp;= \arg \max_ \mathbf{w} \prod_i P(y_i|X_i,{\bf w})<br>\\ &amp;= \arg \max_ \mathbf{w} \sum_i \ln (P(y_i|X_i, {\bf w}) )<br>\end{align}<br>$$</p><p>令 $-L({\bf w}) = \sum_i(y_i \ln(P(Y=1|X_i,{\bf w}))+(1-y_i) \ln(P(Y=0|X_i,{\bf w})))$,则问题转化为：<br>$$<br>\hat{\bf w} = \arg \min_{\bf w}L({\bf w})<br>$$<br>那么似乎可以用梯度下降法来求解该问题。（解的存在性、唯一性（严格凸、强凸））</p><p>采用正则化可以保证这两点：<br>$$<br>\hat {\bf w} = \arg \max_{\bf w} L({\bf w})+\frac{\lambda}{2}\Vert{\bf w}\Vert_2^2<br>$$</p><p>对于多分类问题，可以训练多个分类器。其中$Y\in \cal{C} = {c_1, \cdots, c_k}$，可令</p><p>$$<br>\begin{align}<br>P(Y\not=c_k|X) &amp;= \frac{1}{1+ \exp(\sum_jw_{kj}X_j+w_{k0})}<br>\end{align}<br>$$</p><p>$$<br>P(Y=c_k|X) =<br>\begin{cases}<br>&amp;  \dfrac{\exp(\sum_j w_{kj}X_j + w_{k0})}{1 + \sum_{k=1}^{K-1}\exp(\sum_j w_{kj}X_j + w_{k0}) } &amp; k = 1, \cdots,K-1 \\<br>&amp; \dfrac{1}{1 + \sum_{k=1}^{K-1}\exp(\sum_j w_{kj}X_j + w_{k0}) } &amp; k = K-1<br>\end{cases}<br>$$</p><h4 id="实际问题：数据的不平衡性"><a href="#实际问题：数据的不平衡性" class="headerlink" title="实际问题：数据的不平衡性"></a>实际问题：数据的不平衡性</h4><p>来自不同分类的数据数目不平衡时，回导致训练得出的决策平面有更大的偏移。</p><p>解决方案包括：</p><ul><li><p>undersample（主要）</p></li><li><p>oversample</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门总结</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前一直不知道docker究竟是个什么，也一直没有用过，在服务器上跑代码也只是先装环境，然后再在IDE远程连接服务器运行。最近想用<a href="http://gcr/" target="_blank" rel="noopener">GCR</a>上的卡来跑实验，推荐使用docker（不知道是否必须使用），想想也可以趁着这个机会稍微入个门，也就学了学，过程也似乎不是那么顺利（花了好几天），不过现在似乎已经可以在docker里跑代码了，也算是初步成功了吧，于是来总结一下。</p></blockquote><p>我的参考资料主要是我的mentor提供给我一份ppt以及一份更简易的<a href="https://github.com/CHUNYUWANG/GCR-Notebook/blob/master/Process.md" target="_blank" rel="noopener">说明指南</a>，也因为很多不理解的地方查了不少资料，我综合了一下，主要还是以ppt上的步骤为主（它不仅仅适用于GCR）。</p><h3 id="测试Docker是否工作"><a href="#测试Docker是否工作" class="headerlink" title="测试Docker是否工作"></a>测试Docker是否工作</h3><p>默认docker/nvidia-docker都已经安装了</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker# The standard docker.</span><br><span class="line"><span class="meta">$</span> nvidia-docker# The docker equipped with GPU.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run hello-world</span><br><span class="line"><span class="meta">$</span> nvidia-docker run --rm nvidiaidia-smi</span><br></pre></td></tr></tbody></table></figure><h3 id="在Docker-Hub上创建账号"><a href="#在Docker-Hub上创建账号" class="headerlink" title="在Docker Hub上创建账号"></a>在Docker Hub上创建账号</h3><p>这个主要是可以把自己本地的docker image给push到docker hub上，这样之后自己或者他人也可以在别的地方pull这个镜像到本地来使用。</p><p>注册时的用户名也就是你之后push时镜像名字的前缀。</p><h3 id="创建自己的镜像"><a href="#创建自己的镜像" class="headerlink" title="创建自己的镜像"></a>创建自己的镜像</h3><p>先在Docker Hub上找一个镜像，比如$\tt{nvidia/cuda:9.1-devel-ubuntu16.04}$，镜像的的命名格式为$\tt{repository:tag}$，一个repository可以有多个tag，我的理解是多个不同版本。</p><p><img src="nvidia_cuda.PNG" alt=""></p><p><img src="cuda16.PNG" alt=""></p><p>先介绍通过命令行输入和commit指令创建镜像的方法。命令行输入下面的指令可以进入我们选择的docker，如果本地没有，它也会先自动pull下来。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvidia-docker run -it nvidia/cuda:9.0-devel-ubuntu16.04</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> root@fbcc4a9105ac:/#</span><br></pre></td></tr></tbody></table></figure><p>执行命令后就会看到$\tt{root@}$后面跟着一串字符，我觉得可以看成是这次操作的一个ID，在commit之前，我们在docker里执行的操作并不会保存下来。</p><p>接下来就是按照自己的想法去安装东西了，因为我需要使用python3和pytorch，以及需要其他的一些包，所以下面的示例也会和这个相关。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装 cudann 7.0, python3, pip3.</span><br><span class="line"><span class="meta">$</span> apt-get install -y --no-install-recommends \</span><br><span class="line">            libcudnn7=7.0.5.15-1+cuda9.0 \</span><br><span class="line">            libcudnn7-dev=7.0.5.15-1+cuda9.0 \</span><br><span class="line">            sudo python3-dev python3-pip libgtk2.0-dev </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建软连接</span><br><span class="line"><span class="meta">$</span> cd /usr/bin </span><br><span class="line"><span class="meta">$</span> rm python </span><br><span class="line"><span class="meta">$</span> ln -s python3 python </span><br><span class="line"><span class="meta">$</span> ln -s pip3 pip </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装需要的包，如pytorch</span><br><span class="line"><span class="meta">$</span> pip --no-cache-dir install torch</span><br><span class="line"><span class="meta">$</span> pip --no-cache-dir install torchvision</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> apt-get clean</span><br><span class="line"><span class="meta">$</span> rm -rf /var/lib/apt/lists/* # 具体用处我也不太清楚，可能是删除一些缓存？</span><br></pre></td></tr></tbody></table></figure><p>输入$\tt{Ctrl + D}$ 可以退出docker。</p><p>然后我们需要提交我们刚才对容器进行的修改，指令如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker commit fbcc4a9105ac hytu99/pytorch:py35</span><br></pre></td></tr></tbody></table></figure><p>前面的字符串就是我们刚才进入容器后生成的那个字符串，表示我们要commit的docker，后面则是我们提交后镜像的名字，一般格式是$\tt{username/repository:tag}$。如果不需要push到docker hub，应该也可以不需要前面的$\tt{username}$前缀。</p><p>之后执行$\tt{docker\ images}$或者$\tt{docker\ image \ ls}$命令就可以看到本地的docker了，其中$\tt{IMAGE \ ID}$也唯一指定了一个docker。</p><p>我们可以将本地的docker给push到docker hub上。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker login</span><br><span class="line"><span class="meta">#</span> 输入你的用户名和密码</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo docker push hytu99/pytorch:py35 # 也可以是docker push IMAGE ID</span><br></pre></td></tr></tbody></table></figure><p>push完后我们就能在docker hub上Repositories里看到这个docker了。</p><p><img src="repo.png" alt=""></p><p>上面的方法比较直观一些，但也有更简便的方法，用$\tt{docker \ build}$命令，可以将上面安装东西的语句写进一个文件（Dockerfile）里，不过得确保文件里没有拼写等错误，否则可能失败。</p><p>在“/home/hanyue/code/myproject/test/”路径下有一个“test_docker.py”, 想用本地这个docker来运行这个代码的话，可以执行如下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --rm --ipc=host --volume-driver=nfs -v /home:/home hytu99/pytorch:py35 sh -c "cd /home/hanyue/code/myproject/test/ &amp;&amp; python -u test_docker.py"  # 具体一些参数的意义我也不是完全了解，重点应该是-v &lt;src&gt;:&lt;dst&gt;指定路径，以及后面指定docker和shell命令</span><br></pre></td></tr></tbody></table></figure><h3 id="在GCR上使用Docker"><a href="#在GCR上使用Docker" class="headerlink" title="在GCR上使用Docker*"></a>在GCR上使用Docker*</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置环境变量</span><br><span class="line"><span class="meta">$</span> uid=$(id -u)</span><br><span class="line"><span class="meta">$</span> did=$(id -g)</span><br><span class="line"><span class="meta">$</span> alias=$(whoami|awk -F. '{ print $2 }' )</span><br><span class="line"><span class="meta">$</span> domain=$(whoami|awk -F. '{print $1}’)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建一个文件“myconfig”</span><br><span class="line"><span class="meta">$</span> vim myconfig</span><br></pre></td></tr></tbody></table></figure><p>以下为“myconfig”文件的一个示例内容，之前创建docker部分的安装命令也可以放到这个文件中，也即前面提到的直接使用build命令来创建docker。</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">FROM</span> hytu99/pytorch:py35</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">ARG</span> uid</span><br><span class="line"><span class="keyword">ARG</span> did</span><br><span class="line"><span class="keyword">ARG</span> domain</span><br><span class="line"><span class="keyword">ARG</span> alias</span><br><span class="line"></span><br><span class="line"><span class="comment"># The below will create your user in your container which you can use to run jobs</span></span><br><span class="line"><span class="keyword">RUN</span> apt-get update</span><br><span class="line"><span class="keyword">RUN</span> apt-get -y install sudo \</span><br><span class="line">&amp;&amp; &gt; /etc/sudoers.d/${alias} \</span><br><span class="line">&amp;&amp; echo "${domain}.domain users:x:${did}:${domain}.${alias}" &gt;&gt; /etc/group \</span><br><span class="line">&amp;&amp; echo "${domain}.${alias}:x:${uid}:${did}:${alias},,,:/home/${alias}:/bin/bash" &gt;&gt; /etc/passwd \</span><br><span class="line">&amp;&amp; echo "${domain}.${alias}:*:17575:0:99999:7:::" &gt;&gt; /etc/shadow \</span><br><span class="line">&amp;&amp; echo "${domain}.${alias} ALL=(ALL) NOPASSWD:ALL" &gt; /etc/sudoers.d/${alias} \</span><br><span class="line">&amp;&amp; echo "  " &gt;&gt; /etc/sudoers.d/${alias} \</span><br><span class="line"># Copy "myconfig" file into my container on build</span><br><span class="line"><span class="keyword">COPY</span> myconfig /root/myconfig</span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在“gcr-repos”服务器上创建我们自己的docker镜像，这里的REPOSITORY和TAG应该也是可以自己指定的。</span><br><span class="line"><span class="meta">$</span> sudo docker build -t gcr-repos.redmond.corp.microsoft.com:5000/${alias}/REPOSITORY:TAG  \</span><br><span class="line">             --build-arg uid=$uid \</span><br><span class="line">             --build-arg did=$did \</span><br><span class="line">             --build-arg alias=$alias \</span><br><span class="line">             --build-arg domain=$domain \</span><br><span class="line">             -f myconfig .</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 把镜像推送到服务器上</span><br><span class="line"><span class="meta">$</span> docker push gcr-repos.redmond.corp.microsoft.com:5000/${alias}/REPOSITORY:TAG</span><br></pre></td></tr></tbody></table></figure><p>如果要使用“gcr-repos”服务器上的docker，我们可以执行如下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --rm --ipc=host --volume-driver=nfs -v gcrnfsw2-msraim.redmond.corp.microsoft.com/msraimscratch:/msraimscratch --user FAREAST.v-hatu gcr-repos.redmond.corp.microsoft.com:5000/v-hatu/pytorch:py35 sh -c "cd /msraimscratch/v-hatu/myproject &amp;&amp; python -u test/test_docker.py -1&gt; out.txt 2&gt;err.txt"</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习笔记】2. Gradient Descent</title>
      <link href="/ml-gradient-descent/"/>
      <url>/ml-gradient-descent/</url>
      
        <content type="html"><![CDATA[<blockquote><p>整理自同学的笔记</p></blockquote><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>$$<br>\min f(\mathbf{x})<br>$$</p><ul><li><p>$f(\mathbf{x})$ is continuously differentiable.</p></li><li><p>$f(\mathbf{x})$ is convex.</p></li></ul><hr><p><strong>Definition:</strong> A set $C$ is convex if the line segment between any two points in $C$ lies in $C$. that is $\forall x_1,x_2 \in C$, and $\forall \theta \in [0, 1]$, we have $\theta x_1 + (1-\theta)x_2 \in C$.</p><p><strong>Definition:</strong> A function $f: \mathbb{R}^n\rightarrow\mathbb{R}$ is convex if $\rm{dom}$ $f$ is convex and if $\mathbf{x},\mathbf{y} \in$ ${\rm dom}f$ and $\theta \in [0, 1]$, we have $f(\theta \mathbf{x} + (1-\theta)\mathbf{y}) \le \theta f(\mathbf{x}) + (1-\theta)f(\mathbf{y})  $.</p><p><strong>Definition:</strong> A function is strict convex if strict inequality holds where $\mathbf{x} \ne \mathbf{y}$ and  $\theta \in [0, 1]$.</p><p><strong>Definition:</strong> A function is strongly convex with parameter $u$ if  $f - \dfrac{u}{2} \Vert \mathbf{x} \Vert ^2$ is convex.</p><hr><p><strong>Theorem 1:</strong> Suppose that $f$ is continuously differentiable. Then $f$ is convex if and only if $\rm{dom}$ $f$ is convex and $f(\mathbf{y}) \ge f(\mathbf{x}) + \langle \nabla f(\mathbf{x}), \mathbf{y}-\mathbf{x} \rangle, \forall \mathbf{x}, \mathbf{y} \in $ ${\rm dom}f$.</p><p><strong>Proof:</strong> </p><p>$( \Rightarrow )$ </p><p>$$<br>\begin{align}<br>f(\mathbf{x} + \theta(\mathbf{y}-\mathbf{x})) &amp;\le f(\mathbf{x}) + \theta [f(\mathbf{y}) - f(\mathbf{x})]\\<br>f(\mathbf{y}) - f(\mathbf{x}) &amp;\ge \lim_{\theta \to 0} \frac{f(\mathbf{x} + \theta(\mathbf{y}-\mathbf{x}))}{\theta}\text{（方向导数）}\\<br>&amp;= \langle \nabla f(\mathbf{x}), \mathbf{y}-\mathbf{x} \rangle<br>\end{align}<br>$$</p><p>$ ( \Leftarrow ) $</p><p>$$<br>\mathbf{z} = \theta \mathbf{x} + (1 - \theta) \mathbf{y}<br>$$</p><p>$$<br> f(\mathbf{x}) \ge f(\mathbf{z}) + \langle \nabla f(\mathbf{z}), \mathbf{x} - \mathbf{z} \rangle \tag{1}<br>$$</p><p>$$<br> f(\mathbf{y}) \ge f(\mathbf{z}) + \langle \nabla f(\mathbf{z}), \mathbf{y} - \mathbf{z} \rangle \tag{2}<br>$$</p><p>$ \theta (1) + (1 - \theta) (2)  $可得。</p><p><strong>Corollary:</strong> Suppose $ f $ is continuously differentiable. Then $ f $ is convex iff  ${\rm dom}f$ is convex and $\langle \nabla f(\mathbf{x})- \nabla f(\mathbf{y}), \mathbf{x}  - \mathbf{y} \rangle \ge 0$.</p><p><strong>Theorem 2:</strong> Suppose that $ f $ is continuously differentiable. Then $ f $ is convex iff ${\rm dom}f$  is convex and $ \nabla ^2 f (\mathbf{x}) \ge 0 $.</p><p><strong>Proof:</strong> </p><p>$ ( \Rightarrow ) $</p><p>Let $ \mathbf{x} _ t = \mathbf{x} + t \mathbf{s} $, $t &gt; 0$. Then</p><p>$$<br>\begin{align}<br>0 \le \frac{1}{t^2} &amp; \langle \nabla f(\mathbf{x} _ t) - \nabla f(\mathbf{x}) , \mathbf{x} _ t - \mathbf{x} \rangle \\<br>&amp; = \frac {1}{t} \langle \nabla f(\mathbf{x} _ t) - \nabla f(\mathbf{x}), \mathbf{s} \rangle \\<br>&amp; = \frac {1}{t} \int _ 0 ^ t \langle \nabla ^2 f(\mathbf{x} + \tau \mathbf{s})\mathbf{s}, \mathbf{s} \rangle d\tau \text{（微积分基本定理）}\\<br>&amp; \xrightarrow{t \to 0} \langle \nabla ^2 f(\mathbf{x})\mathbf{s}, \mathbf{s} \rangle \\<br>&amp; = \mathbf{s}^T \nabla ^2 f(\mathbf{x}) \mathbf{s}<br>\end{align}<br>$$</p><p>$ ( \Leftarrow ) $</p><p>$$<br>\begin{align}<br>g(t) &amp; = f(\mathbf{x} + t \mathbf{s}) \\<br>g’(0) &amp;= \langle \nabla f(\mathbf{x}), \mathbf{s} \rangle \\<br>g’’(0) &amp;= \langle \nabla ^2 f(\mathbf{x})\mathbf{s}, \mathbf{s} \rangle \\<br>g(1) &amp; = g(0) + \int _ 0 ^ 1 g’(t) dt \\<br>&amp;  = g(0) + \int _ 0 ^ 1 [g’(0) + \int _ 0 ^ t g’’(\tau) d\tau ] dt \\<br>&amp; \ge g(0) + g’(0) \\<br>f(\mathbf{x} +  \mathbf{s}) &amp; \ge f(\mathbf{x}) + \langle \nabla f(\mathbf{x}), \mathbf{s} \rangle<br>\end{align}<br>$$</p><p><strong>Theorem 3:</strong> Suppose $f$ is  continuously differentiable. Then $ \mathbf{x}^  * \in \arg \min \limits _ \mathbf{x}  f ( \mathbf{x})  $  iff $ \nabla f(\mathbf{x}^ *) = 0$, $  f(\mathbf{y}) \ge f(\mathbf{x}) + \langle \nabla f(\mathbf{x}), \mathbf{y} - \mathbf{x} \rangle = f(\mathbf{x})$.</p><h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h4><p>$$<br>\min f(\mathbf{x})<br>$$</p><ul><li>The objective function $f(\mathbf{x})$ is continuously differentiable.</li><li>$f(\mathbf{x})$ is convex.</li><li>$\exists {\bf x^ *} \in {\rm dom}f$, s.t. $ f({\bf x^ *})= f^ * = \min f({\bf x}) $.</li><li>The gradient of $f$ is Lipschitz continuous, that is, $ \Vert \nabla f({\bf x}) - \nabla f({\bf y}) \Vert \le L \Vert {\bf x}-{\bf y} \Vert$, $L&gt;0$.</li></ul><h5 id="Algorithm-Gradient-Descent"><a href="#Algorithm-Gradient-Descent" class="headerlink" title="Algorithm:  Gradient Descent"></a>Algorithm:  Gradient Descent</h5><p>$$<br>\begin{align}<br>&amp; \text{Input: An initial point } {\bf x_0} \text{, a constant } \alpha \in (0, \dfrac{2}{L}), \ k = 0 \\<br>&amp; \text{while the termination condition does not hold,  do} \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ k = k + 1 \\<br>&amp; ~ ~ ~ ~ ~ ~ ~ ~ {\bf x_{k+1}}={\bf x_k}-\alpha\nabla f({\bf x_k}) \\<br>&amp; \text{end while}<br>\end{align}<br>$$</p><h5 id="Convergence-Rate"><a href="#Convergence-Rate" class="headerlink" title="Convergence Rate"></a>Convergence Rate</h5><p><strong>Definition:</strong> Suppose that the sequence { $a_k$} converges to a number $L$. Then, the sequence is said to converge linearly to $L$ if there exists a number $\mu \in (0, 1)$, s.t. $\lim \limits _ {k \to \infty } \dfrac{\vert a_{k + 1} - L\vert}{\vert a_k - L \vert} = \mu$.</p><p><strong>Lemma 1:</strong> Suppose that a function $f \in  C^1$. If $\nabla f$ is Lipschitz continuous with Lipschitz constant $L$, then<br>$$<br>f({\bf y}) \le f({\bf x}) + \langle \nabla f({\bf x}),{\bf y} - {\bf x} \rangle+\dfrac{L}{2} \Vert {\bf y}-{\bf x}\Vert^2.<br>$$</p><p><strong>Proof:</strong><br>$$<br>\begin{align}<br>f({\bf y})-f({\bf x}) &amp;= \int^{\bf y}_{\bf x}\nabla f({\bf z}){\bf dz}<br>\\&amp;= \int^1_0 \langle\nabla f({\bf x}+t({\bf y}-{\bf x})),{\bf y}-{\bf x}\rangle dt<br>\\&amp;= \langle\nabla f({\bf x}),{\bf y}-{\bf x}\rangle+\int^1_0 \langle\nabla f({\bf x}+t({\bf y}-{\bf x}))-\nabla f({\bf x}),{\bf y}-{\bf x}\rangle dt<br>\\&amp;\le \langle\nabla f({\bf x}),{\bf y}-{\bf x}\rangle+\int^1_0 \Vert\nabla f({\bf x}+t({\bf y}-{\bf x}))-\nabla f({\bf x})\Vert\Vert{\bf y}-{\bf x}\Vert dt<br>\\&amp;\le \langle\nabla f({\bf x}),{\bf y}-{\bf x}\rangle+L\Vert{\bf y}-{\bf x}\Vert^2\int^1_0 t dt<br>\\&amp;=\langle\nabla f({\bf x}),{\bf y}-{\bf x}\rangle+\frac{L}{2}\Vert {\bf y}-{\bf x}\Vert^2<br>\end{align}<br>$$</p><p>（与凹凸性无关）</p><p><strong>Lemma 2 （Descent Lemma） :</strong> Suppose that a function $f \in  C^1$. If $\nabla f$ is Lipschitz continuous with Lipschitz constant $L&gt;0$, then $\forall \{ {\bf x_k} \}$ generated by the Gradient Descent Algorithm satisfies<br>$$<br>f({\bf x_{k+1}})\le f({\bf x_k})-{\alpha}(1-\frac{L\alpha}{2})\Vert\nabla f({\bf x_k})\Vert^2.<br>$$</p><p>（这也是为什么算法约定$\alpha \in (0, \dfrac{2}{L})$）</p><p>下面证明算法可以收敛到最小值，在前提条件下，可以考虑证明：<br>$$<br>\lim_{k \to \infty}\nabla f({\bf x_k}) = \nabla f(\lim_{ k\to \infty}{\bf x_k})=0.<br>$$<br><strong>Proof:</strong></p><p>由Lemma 2，<br>$$<br>\begin{align}<br>\Vert \nabla f({\bf x_k})\Vert^2 &amp; \le \frac{f({\bf x_{k}})-f({\bf x_{k+1}})}{\alpha(1-\frac{L\alpha}{2})} \\<br>\sum_k\Vert \nabla  f({\bf x_k})\Vert^2 &amp;\le \frac{f({\bf x_0})-f({\bf x_{k+1}})}{\alpha(1-\frac{L\alpha}{2})}\\<br>&amp;\le\frac{f({\bf x_0})-f^ *}{\alpha(1-\frac{L\alpha}{2})}<br>\end{align}<br>$$<br>这个求和存在固有上界，故<br>$$<br>\lim_{k\to \infty} \nabla f({\bf x_k}) =0<br>$$</p><h5 id="Efficiency-and-limitations"><a href="#Efficiency-and-limitations" class="headerlink" title="Efficiency and limitations"></a>Efficiency and limitations</h5><p><strong>Theorem:</strong>  Consider the Problem（$\min f(x)$）and the sequence generated by the Gradient Descent Algorithm. Then the sequence value $f({\bf x_k})$ tends to the optimum function value in a rate of $O(\frac{1}{k})$.</p><ol><li><p>If $\alpha \in (0, \dfrac{1}{L})$<br>$$<br>f({\bf x_k})-f^ * \le \frac{1}{k}(\frac{1}{2\alpha}\Vert {\bf x_0-x^ *}\Vert^2)<br>$$</p></li><li><p>If $ \alpha \in (\dfrac{1}{L}, \dfrac{2}{L}) $<br>$$<br>f({\bf x_k})-f^ * \le \frac{1}{k}(\frac{1}{2\alpha}\Vert {\bf x_0-x^ *}\Vert^2+\frac{L\alpha -1}{2-L\alpha}(f({\bf x_0})-f({\bf x ^  * })) )<br>$$</p></li></ol><p><strong>Proof:</strong></p><p>As $ {\bf x_{k+1}}={\bf x_k}-\alpha\nabla f({\bf x_k})$ and $ f({\bf y}) \le f({\bf x}) + \langle\nabla f({\bf x}),{\bf y}-{\bf x}\rangle+\dfrac{L}{2}\Vert {\bf y}-{\bf x}\Vert^2 $, </p><p>$$<br>f({\bf x_{k+1}})\le f({\bf x_{k}})-(\frac{1}{\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}-x_k}\Vert^2<br>$$</p><p>$$<br>f({\bf x_{k+1}})-f^ *\le f({\bf x_{k}})-f^ *-(\frac{1}{\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}-x_k}\Vert^2<br>$$</p><p>Consider the convexity of $f$,</p><p>$$<br>\begin{align}<br>f({\bf x _ {k + 1} })-f({\bf x^ *}) &amp; \le \langle \nabla f({\bf x_k}), { \bf x_k}-{\bf x^ *}\rangle-(\frac{1}{\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}-x_k}\Vert^2<br>\\ &amp; = -\frac{1}{\alpha} \langle{\bf x_{k+1}}-{\bf x_k},{\bf x_k}-{\bf x^ *}\rangle-(\frac{1}{\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}-x_k}\Vert^2<br>\\ &amp; = -\frac{1}{2\alpha}(\Vert{\bf x_{k+1}}-{\bf x^ *}\Vert^2-\Vert{\bf x_{k+1}}-{\bf x_k}\Vert^2-\Vert{\bf x_{k}}-{\bf x^ *}\Vert^2)-(\frac{1}{\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}}-{\bf x_k}\Vert^2<br>\\ &amp; = \frac{1}{2\alpha}(\Vert{\bf x_{k}}-{\bf x^ *}\Vert^2-\Vert{\bf x_{k+1}}-{\bf x^ *}\Vert^2)-(\frac{1}{2\alpha}-\frac{L}{2})\Vert{\bf x_{k+1}}-{\bf x_k}\Vert^2<br>\end{align}<br>$$</p><p>Summing up the inequalities,</p><p>$$<br>\begin{align}<br>k(f({\bf x_{k} })-f({\bf x ^ *})) &amp;\le \sum ^ { k-1 } _ { i=0 } ( f({\bf x _ {i + 1}})- f({\bf x^ * }) ) \\<br>&amp; \le \frac{1}{2 \alpha }(\Vert {\bf x_{0} }-{\bf x^ *}\Vert^2-\Vert{\bf x_{k}} - {\bf x ^ *} \Vert^2 ) - (\frac{1}{2\alpha} - \frac{L}{2} ) \sum^{k-1}_{i=0} \Vert{\bf x _ {i+1} }- {\bf x_i} \Vert^2<br>\end{align}<br>$$</p><ol><li>If $\alpha \in (0, \dfrac{1}{L})$, $\dfrac{1}{2\alpha}-\dfrac{L}{2}&gt;0$, then</li></ol><p>$$<br>k(f({\bf x_{k}})-f({\bf x^ *})) \le\frac{1}{2\alpha}\Vert{\bf x_{0}}-{\bf x^ *}\Vert^2.<br>$$</p><ol start="2"><li>If $\alpha \in (\dfrac{1}{L}, \dfrac{2}{L})$, $\dfrac{1}{2\alpha}-\dfrac{L}{2}&gt;0$, then</li></ol><p>$$<br>\begin{align}<br>k (f({\bf x_k })-f({\bf x^ *})) &amp; \le \frac{1}{2 \alpha} (\Vert { \bf x_0} - {\bf x^ *} \Vert ^2 - \Vert{\bf x_k}- {\bf x^ *} \Vert^2) + \frac {L \alpha-1}{2\alpha}\sum^{k-1} _ { i = 0 } \Vert {\bf x _ {i+1} } - {\bf x_i} \Vert^2<br>\\ &amp; \le \frac{1}{2 \alpha} \Vert { \bf x_0} - { \bf x^ * } \Vert^2 + \frac{L \alpha-1}{2 \alpha} \sum^{ \infty} _ {i=0} \Vert {\bf x _ {i+1} } - {\bf x_i} \Vert^2<br>\\ &amp; \le  \frac{1}{2 \alpha} \Vert {\bf x_0} - {\bf x^ *} \Vert^2 + \frac{L \alpha-1}{2 \alpha}\ \frac{2\alpha}{2-L\alpha} (f({\bf x_0})-f({\bf x^ *})) (Lemma \ 2)<br>\end{align}<br>$$</p><p>Remark: $\Vert {\bf x_k} - {\bf x^ *} \Vert$ doesn’t always converge to 0.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习笔记】1. Linear Regression</title>
      <link href="/ml-linear-regression/"/>
      <url>/ml-linear-regression/</url>
      
        <content type="html"><![CDATA[<blockquote><p>整理自同学的笔记</p></blockquote><h3 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h3><p>Given a data set $ \{ ( \mathbf{x}_i, y_i ) \} _ { i = 1 } ^ n $, where  $\mathbf{x}_i \in \mathbb{R}^{d+1}$ and $y_i \in \mathbb{R}$.</p><h4 id="Linear-Regression-by-Least-Squares"><a href="#Linear-Regression-by-Least-Squares" class="headerlink" title="Linear Regression by Least Squares"></a>Linear Regression by Least Squares</h4><p>$$<br>y_i = \mathbf{w}^T \mathbf{x}_i,<br>$$</p><p>where $ \mathbf{x} _ i = (1, x_{ i1}, x_{i2}, \cdots , x_{id})^T $ and $ \mathbf{w} = (w_0, w_1, \cdots , w_d)^T $.</p><p>Average Fitting error is</p><p>$$<br>\begin{align}<br>L &amp;= \frac{1}{n} \sum_i^n(y_i - \mathbf{w}^T\mathbf{x}_i)^2 \\<br>&amp;= \frac{1}{n} \Vert \mathbf{y-\bar{X}w} \Vert ^2<br>\end{align}<br>$$</p><p>where $\mathbf{y}=(y_i, \cdots , y_n) $ and $\mathbf{\bar{X}} \in \mathbb{R}^{n \times (d+1)}$.</p><p>$$<br>0 = \left. \frac{\partial L}{\partial \mathbf{w}}\right|_\mathbf{w=\hat{w}}=-\frac{2}{n}\mathbf{\bar{X}}^T(\mathbf{y}-\mathbf{\bar{X}\hat{w}}) \Rightarrow \mathbf{\hat{w}}= (\mathbf{\bar{X}}^T\mathbf{\bar{X}})^{-1}\mathbf{\bar{X}}^T\mathbf{y}<br>$$</p><p>$$<br>\mathbf{\hat{y}} =\mathbf{\bar{X}}(\mathbf{\bar{X}}^T\mathbf{\bar{X}})^{-1}\mathbf{\bar{X}}^T\mathbf{y}<br>$$</p><p>Projection matrix $ P = \mathbf{\bar{X}}(\mathbf{\bar{X}}^T\mathbf{\bar{X}})^{-1}\mathbf{\bar{X}}^T$ projects an arbitrary vector to the column space of $\mathbf{\bar{X}}$.</p><h4 id="Linear-Regression-by-Maximum-Likelihood"><a href="#Linear-Regression-by-Maximum-Likelihood" class="headerlink" title="Linear Regression by Maximum Likelihood"></a>Linear Regression by Maximum Likelihood</h4><p>$$<br>y_i = \mathbf{w}^T\mathbf{x}_i + \epsilon_i ,<br>$$</p><p>假设$ \mathbf{w} $与$ \mathbf{x}_i$给定。</p><p><strong>Assumption 1</strong>:  $\epsilon_i \sim \cal{N}(0, \sigma^2)$,  $y_i |\mathbf{x}_i, \mathbf{w}, \sigma \sim \mathcal{N}(\mathbf{w}^T\mathbf{x}_i, \sigma^2)$.</p><p><strong>Assumption 2</strong>: IID. $P((\mathbf{x}_1, y_2),\cdots ,(\mathbf{x}_n, y_n)) = \prod_iP((\mathbf{x}_i, y_i))$.<br>$$<br>\begin{align}<br>L &amp;= P(y_1, \cdots , y_n | \mathbf{x}_1, \cdots, \mathbf{x}_n, \mathbf{w}, \sigma) \\<br> &amp;= \frac{P((\mathbf{x}_1, y_2), \cdots ,(\mathbf{x}_n, y_n)|\mathbf{w}, \sigma)}{P(\mathbf{x} _ 1, \cdots ,\mathbf{x}_n|\mathbf{w}, \sigma)}\\<br>&amp;=\frac{\prod _ {i=1} ^n P(\mathbf{x}_i, y_i|{\bf w}, \sigma)}{\prod _ {i=1}^n P(\mathbf{x}_i|{\bf w}, \sigma)} \\<br> &amp;= \prod _ {i=1}^n P(y_i|{\bf x},{\bf w}, \sigma)<br>\end{align}<br>$$</p><p>$$<br>\begin{align}<br>\log L &amp;= \sum_i^n \log (\frac{1}{\sqrt{2 \pi \sigma^2}}\exp{\frac{1}{2\sigma^2}(y_i-{\bf w}^T{\bf x}_i)^2})\\<br>&amp;=-\frac{n}{2}\log 2\pi - n \log \sigma + \frac{1}{2\sigma^2}\sum_i^n(y_i-{\bf w}^T{\bf x}_i)^2<br>\end{align}<br>$$</p><p>$$<br>\begin{align}<br>0 &amp;=\left. \frac{\partial \log L}{\partial {\bf w} } \right|_ \mathbf{w=\hat{w}} \\<br>&amp;=\frac{1}{\sigma^2}\sum_{i=1}^n{\bf x}_i y_i - {\bf x}_i{\bf x}_i^T{\bf \hat{w} } \\<br>&amp;=\frac{1}{\sigma^2}(\mathbf{\bar{X}}^T\mathbf{y}-{\bf \bar{X} }^T\mathbf{\bar{X}\hat{w} })) \\<br>&amp; \Rightarrow \mathbf{\hat{w} }= (\mathbf{\bar{X} }^T\mathbf{\bar{X} })^{-1}\mathbf{\bar{X} }^T\mathbf{y}<br>\end{align}<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文阅读】Deep Code Search</title>
      <link href="/deep-code-search/"/>
      <url>/deep-code-search/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【ASE高级软件工程】第二次结对作业Code Search论文阅读笔记</p></blockquote><h2 id="Deep-Code-Search"><a href="#Deep-Code-Search" class="headerlink" title="Deep Code Search"></a>Deep Code Search</h2><h3 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h3><ul><li><p>we propose a novel deep neural network named <strong>CODEnn</strong>（Code-Description Embedding Neural Network）.</p></li><li><p>CODEnn jointly embeds code snippets and natural language descriptions into a high-dimensional vector space.</p></li><li><p>we implement a code search tool named <strong>DeepCS</strong>. </p></li></ul><h3 id="1-INTRODUCTION"><a href="#1-INTRODUCTION" class="headerlink" title="1.  INTRODUCTION"></a>1.  INTRODUCTION</h3><p><strong>Other Approaches:</strong>  </p><ul><li><p>information retrieval（IR）techniques.</p></li><li><p>problem: mismatch between the high-level intent reﬂected in the natural language queries and low-level implementation details in the source code.</p></li></ul><p><strong>Our Method:</strong></p><ul><li><p>CODEnn jointly embeds code snippets and natural language descriptions into a high-dimensional vector space</p></li><li><p>DeepCS trains the CODEnn model on a corpus of 18.2 million Java code snippets（in the form of commented methods）from GitHub.   </p></li><li><p>DeepCS reads code snippets from a codebase and embeds them into vectors using the trained CODEnn.</p></li><li><p>when a user query arrives, DeepCS fnds code snippets that have the nearest vectors to the query vector and return them. </p></li></ul><p><strong>Evalutate:</strong></p><ul><li>we perform code search on a search codebase using 50 real-world queries obtained from Stack Overﬂow.  </li></ul><h3 id="2-BACKGROUND"><a href="#2-BACKGROUND" class="headerlink" title="2.  BACKGROUND"></a>2.  BACKGROUND</h3><p><strong>Embedding:</strong> a technique for learning vector representations of entities.</p><p><strong>Word Embedding:</strong> It represents words as fixed-length vectors so that similar words are close<br>to each other in the vector space.</p><p><strong>Sequence Embedding:</strong> Use RNN. The embedding vector of the sentence is summarized from the hidden states $h_1, …, h_T$（select the last state or use maxpooling）. </p><p><strong>Joint Embedding:</strong> a technique to jointly embed/correlate heterogeneous data into a unifed vector space so that semantically similar concepts across the two modalities occupy nearby regions of the space.<br>$$<br>\cal{X}\xrightarrow{\phi}\it{V}_\cal{X}\rightarrow \it{J}(\it{V}_\cal{X},\it{V}_\cal{Y})\leftarrow \it{V}_\cal{Y} \xleftarrow{\psi}\cal{Y}<br>$$<br><img src="joint-embeding.png" alt="An example of joint embedding"></p><h3 id="3-A-DEEP-NEURAL-NETWORK-FOR-CODE-SEARCH"><a href="#3-A-DEEP-NEURAL-NETWORK-FOR-CODE-SEARCH" class="headerlink" title="3.  A DEEP NEURAL NETWORK FOR CODE SEARCH"></a>3.  A DEEP NEURAL NETWORK FOR CODE SEARCH</h3><p><img src="CODEnn.png" alt="The structrue of CODEnn"></p><p><strong>Architecture:</strong></p><ul><li><p>Code Embedding Network: It embeds source code into vectors.（Three parts: the method name, the API invocation sequence, and the tokens contained in the source code）</p></li><li><p>Description Embedding Network: It embeds natural language descriptions into<br>vectors. </p></li><li><p>Similarity Module: cosine similarity.</p></li></ul><p><strong>Training:</strong></p><ul><li><p>Training Instance: $\langle C, D+, D-\rangle$. D+ is a postitive description of code snippet C. D- is a negtive description of C(chosen randomly). </p></li><li><p>Loss: $\cal{L}(\theta) = \sum\limits_{\langle C, D+, D-\rangle \in P} max(0, \epsilon - cos(\mathbf{c}, \mathbf{d+})+cos(\mathbf{c}, \mathbf{d-})) $</p></li></ul><h3 id="4-DEEPCS-DEEP-LEARNING-BASED-CODE-SEARCH"><a href="#4-DEEPCS-DEEP-LEARNING-BASED-CODE-SEARCH" class="headerlink" title="4.  DEEPCS: DEEP LEARNING BASED CODE SEARCH"></a>4.  DEEPCS: DEEP LEARNING BASED CODE SEARCH</h3><p><strong>Extracion:</strong> </p><p><img src="extraction.png" alt="An example of extracting code elements"></p><p>We build the training tuples using Java methods that have documentation comments from open-source projects on GitHub.</p><p><strong>Training and Searching:</strong></p><p><img src="workflow.png" alt="The overall workflow of DeepCS"></p><h3 id="5-EVALUATION"><a href="#5-EVALUATION" class="headerlink" title="5.  EVALUATION"></a>5.  EVALUATION</h3><p><strong>Search Codebase:</strong> </p><p>Search codebase is different from the training corpus. They are considered in isolation and contain all code（including those do not have Javadoc comments）.</p><p><strong>Performance Measure:</strong></p><ul><li>FRank: the rank of the first hit result in the result list.</li><li>SuccessRate@k: percentage of queries for which more than one correct<br>result could exist in the top k ranked results（$\frac{1}{|Q|}\sum\limits_{q=1}^{|Q|} \delta(FRank_q \leq k)$）.</li><li>Precision@k: percentage of relevant results in the top k returned results for each query.</li><li>MRR：the average of the reciprocal ranks of results of a set of queries（$\frac{1}{|Q|}\sum\limits_{q=1}^{|Q|} \frac{1}{FRank_q}$）.</li></ul><p><strong>Results:</strong></p><img src="The statistical comparison.png" alt="The statistical comparison" style="zoom:67%;"><p>The symbol ‘+’ indicates the average value.</p><img src="accuracy.png" alt="Overall Accuracy" style="zoom:67%;"><h3 id="6-DISCUSSION"><a href="#6-DISCUSSION" class="headerlink" title="6.  DISCUSSION"></a>6.  DISCUSSION</h3><p><strong>Strengths:</strong></p><ul><li>It has the ability to recognize query semantics (e.g., <em>queue an event to be run on the thread*​ and *run an event on a thread queue</em>)</li><li>Its search results are less affected by irrevant or noisy keyword (e.g., <em>get the content<br>of an input stream as a string using a specified character encoding</em>).</li><li>it not only seeks snippets with matched keywords but also recommends those without matched keywords but are semantically related.</li></ul><p><strong>Why does DeepCS Work?</strong></p><ul><li>A unifed representation of heterogeneous data.</li><li>Better query understanding through deep learning.</li><li>Clustering snippets by natural language semantics.</li></ul><p><strong>Limitation:</strong></p><p>It sometimes ranks partially relevant results higher than the exact matching ones. This<br>is because DeepCS ranks results by just considering their semantic vectors.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code search </tag>
            
            <tag> deep learning </tag>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机试模板整理</title>
      <link href="/code-template/"/>
      <url>/code-template/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是当时我去参加清华计算机系夏令营时为机考准备的模板，部分参考链接在最后列出, 我整理了我认为常见的一些算法，顺便改了改部分代码风格（其实主要是加空格hhh）。最后机试的时候实际只用到了关于强连通分量缩点的那部分代码，说起来那部分代码还是机试前一天晚上在宾馆手抄的（果然我总能考前精准押题233333）。</p><p>今年清华机试一反常态难度大大降低，满分的似乎都有25%，我当时在测试数据上也是取得了满分（之后有空把原题也整理一下放上来）。不过最后因为其他一些原因，也没有去报名清华九月的推免，也就没能去成清华。不过这些算法模板作为学习材料还是很不错的（说不定以后什么时候又用上了）。</p></blockquote><h2 id="0-头文件"><a href="#0-头文件" class="headerlink" title="0. 头文件"></a>0. 头文件</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SBCURE_NO_DEPRECATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="1-经典算法"><a href="#1-经典算法" class="headerlink" title="1. 经典算法"></a>1. 经典算法</h2><h3 id="1-1-埃拉托斯特尼筛法"><a href="#1-1-埃拉托斯特尼筛法" class="headerlink" title="1.1. 埃拉托斯特尼筛法"></a>1.1. 埃拉托斯特尼筛法</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |埃式筛法|</span></span><br><span class="line"><span class="comment">    |快速筛选素数|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> prime[maxn];  </span><br><span class="line"><span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        is_prime[i] = <span class="literal">true</span>;</span><br><span class="line">    is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i){   <span class="comment">// 注意数组大小是n</span></span><br><span class="line">        <span class="keyword">if</span>(is_prime[i]){</span><br><span class="line">            prime[p++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)  <span class="comment">// 轻剪枝，j必定是i的倍数</span></span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> p;   <span class="comment">// 返回素数个数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-快速幂"><a href="#1-2-快速幂" class="headerlink" title="1.2. 快速幂"></a>1.2. 快速幂</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;   <span class="comment">// 视数据大小的情况而定</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">powerMod</span><span class="params">(LL x, LL n, LL m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>){</span><br><span class="line">        <span class="keyword">if</span>  (n &amp; <span class="number">1</span>) <span class="comment">// 判断是否为奇数，若是则true</span></span><br><span class="line">            res = (res * x) % m;</span><br><span class="line">        x = (x * x) % m;</span><br><span class="line">        n  &gt;&gt;= <span class="number">1</span>;    <span class="comment">// 相当于n /= 2;</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-大数模拟"><a href="#1-3-大数模拟" class="headerlink" title="1.3. 大数模拟"></a>1.3. 大数模拟</h3><h4 id="1-3-1-大数加法"><a href="#1-3-1-大数加法" class="headerlink" title="1.3.1. 大数加法"></a>1.3.1. 大数加法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |大数模拟加法|</span></span><br><span class="line"><span class="comment">    |用string模拟|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add1</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span> &amp;&amp; s2 == <span class="string">""</span>)   <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span>)   <span class="keyword">return</span> s2;</span><br><span class="line">    <span class="keyword">if</span> (s2 == <span class="string">""</span>)   <span class="keyword">return</span> s1;</span><br><span class="line">    <span class="built_in">string</span> maxx = s1, minn = s2;</span><br><span class="line">    <span class="keyword">if</span> (s1.length() &lt; s2.length()){</span><br><span class="line">        maxx = s2;</span><br><span class="line">        minn = s1;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> a = maxx.length() - <span class="number">1</span>, b = minn.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &gt;= <span class="number">0</span>; --i){</span><br><span class="line">        maxx[a--] += minn[i] - <span class="string">'0'</span>; <span class="comment">// a一直在减 ， 额外还要减个'0'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = maxx.length()<span class="number">-1</span>; i &gt; <span class="number">0</span>;--i){</span><br><span class="line">        <span class="keyword">if</span> (maxx[i] &gt; <span class="string">'9'</span>){</span><br><span class="line">            maxx[i] -= <span class="number">10</span>;<span class="comment">//注意这个是减10</span></span><br><span class="line">            maxx[i - <span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (maxx[<span class="number">0</span>] &gt; <span class="string">'9'</span>){</span><br><span class="line">        maxx[<span class="number">0</span>] -= <span class="number">10</span>;</span><br><span class="line">        maxx = <span class="string">'1'</span> + maxx;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxx;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-2-大数阶乘"><a href="#1-3-2-大数阶乘" class="headerlink" title="1.3.2. 大数阶乘"></a>1.3.2. 大数阶乘</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |大数模拟阶乘|</span></span><br><span class="line"><span class="comment">|用数组模拟|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn], len;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    在mult函数中，形参部分：len每次调用函数都会发生改变，n表示每次要乘以的数，最终返回的是结果的长度</span></span><br><span class="line"><span class="comment">    tip: 阶乘都是先求之前的(n-1)!来求n!</span></span><br><span class="line"><span class="comment">    初始化Init函数很重要，不要落下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>{</span><br><span class="line">    len = <span class="number">1</span>;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> num[], <span class="keyword">int</span> len, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    LL tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">         tmp = tmp + num[i] * n;    <span class="comment">//从最低位开始，等号左边的tmp表示当前位，右边的tmp表示进位（之前进的位）</span></span><br><span class="line">         num[i] = tmp % <span class="number">10</span>; <span class="comment">// 保存在对应的数组位置，即去掉进位后的一位数</span></span><br><span class="line">         tmp = tmp / <span class="number">10</span>;    <span class="comment">// 取整用于再次循环,与n和下一个位置的乘积相加</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(tmp) {    <span class="comment">// 之后的进位处理</span></span><br><span class="line">         num[len++] = tmp % <span class="number">10</span>;</span><br><span class="line">         tmp = tmp / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="number">1977</span>; <span class="comment">// 求的阶乘数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line">        len = mult(num, len, i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[i]);    <span class="comment">// 从最高位依次输出,数据比较多采用printf输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-最大公约数（GCD）"><a href="#1-4-最大公约数（GCD）" class="headerlink" title="1.4. 最大公约数（GCD）"></a>1.4. 最大公约数（GCD）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |辗转相除法|</span></span><br><span class="line"><span class="comment">    |欧几里得算法|</span></span><br><span class="line"><span class="comment">|求最大公约数|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> big, <span class="keyword">int</span> small)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (small &gt; big) </span><br><span class="line">        swap(big, small);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (small != <span class="number">0</span>){ <span class="comment">// 辗转相除法</span></span><br><span class="line">        <span class="keyword">if</span> (small &gt; big) </span><br><span class="line">            swap(big, small);</span><br><span class="line">        temp = big % small;</span><br><span class="line">        big = small;</span><br><span class="line">        small = temp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>(big);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-最小公倍数（LCM）"><a href="#1-5-最小公倍数（LCM）" class="headerlink" title="1.5. 最小公倍数（LCM）"></a>1.5. 最小公倍数（LCM）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span> <span class="params">(<span class="keyword">int</span> big, <span class="keyword">int</span> small)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> big * small / gcd(big, small);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-6-全排列"><a href="#1-6-全排列" class="headerlink" title="1.6. 全排列"></a>1.6. 全排列</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |求1到n的全排列, 有条件|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pern</span><span class="params">(<span class="keyword">int</span> <span class="built_in">list</span>[], <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>{   <span class="comment">// k表示前k个数不动仅移动后面n-k位数</span></span><br><span class="line">    <span class="keyword">if</span> (k == n - <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">list</span>[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; i++) {   <span class="comment">// 输出的是满足移动条件所有全排列</span></span><br><span class="line">            swap(<span class="built_in">list</span>[k], <span class="built_in">list</span>[i]);</span><br><span class="line">            Pern(<span class="built_in">list</span>, k + <span class="number">1</span>, n);</span><br><span class="line">            swap(<span class="built_in">list</span>[k], <span class="built_in">list</span>[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-二分搜索"><a href="#1-7-二分搜索" class="headerlink" title="1.7. 二分搜索"></a>1.7. 二分搜索</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |二分搜索|</span></span><br><span class="line"><span class="comment">    |要求：先排序|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// left为最开始元素, right是末尾元素的下一个数，x是要找的数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right){</span><br><span class="line">        m = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[m] &gt;= x)  </span><br><span class="line">            right = m;   </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            left = m + <span class="number">1</span>;    </span><br><span class="line">        <span class="comment">// 如果要替换为 upper_bound, 改为 if (A[m] &lt;= v) x = m+1; else y = m;     </span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    最后left == right  </span></span><br><span class="line"><span class="comment">    如果找有多少的x，可以用lower_bound查找一遍，upper_bound查找一遍，下标相减。 </span></span><br><span class="line"><span class="comment">    cpp自带的lower_bound(a,a+n,x)返回数组中第一个x的地址, upper_bound(a,a+n,x)返回数组中最后一个x的下一个数的地址。如果a+n内没有找到x或x的下一个地址，返回a+n的地址  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2. 数据结构"></a>2. 数据结构</h2><h3 id="2-1-并查集"><a href="#2-1-并查集" class="headerlink" title="2.1. 并查集"></a>2.1. 并查集</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |合并节点操作|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];   <span class="comment">// 储存i的father父节点  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSet</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)   </span><br><span class="line">        father[i] = i;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{   <span class="comment">// 迭代找根节点</span></span><br><span class="line">    <span class="keyword">int</span> root = x; <span class="comment">// 根节点  </span></span><br><span class="line">    <span class="keyword">while</span> (root != father[root]) { <span class="comment">// 寻找根节点  </span></span><br><span class="line">        root = father[root];  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">while</span> (x != root) {  </span><br><span class="line">        <span class="keyword">int</span> tmp = father[x];  </span><br><span class="line">        father[x] = root; <span class="comment">// 根节点赋值  </span></span><br><span class="line">        x = tmp;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> root;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{   <span class="comment">// 迭代找根节点</span></span><br><span class="line"><span class="keyword">if</span> (x == father[x])</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> father[x] = findRoot(father[x]);</span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{  <span class="comment">// 将x所在的集合和y所在的集合整合起来形成一个集合。  </span></span><br><span class="line">    <span class="keyword">int</span> a, b;  </span><br><span class="line">    a = findRoot(x);  </span><br><span class="line">    b = findRoot(y);  </span><br><span class="line">    father[a] = b;  <span class="comment">// y连在x的根节点上   或father[b] = a为x连在y的根节点上；  </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-最小生成树"><a href="#2-2-最小生成树" class="headerlink" title="2.2. 最小生成树"></a>2.2. 最小生成树</h3><h4 id="2-2-1-Kruskal算法"><a href="#2-2-1-Kruskal算法" class="headerlink" title="2.2.1. Kruskal算法"></a>2.2.1. Kruskal算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |Kruskal算法|</span></span><br><span class="line"><span class="comment">    |适用于稀疏图|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一步：点、边、加入vector，把所有边按从小到大排序</span></span><br><span class="line"><span class="comment">    第二步：并查集部分 + 下面的code</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>{    </span><br><span class="line">    ans = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {    </span><br><span class="line">        <span class="keyword">if</span> (Find(edge[i].a) != Find(edge[i].b)) {    </span><br><span class="line">            Union(edge[i].a, edge[i].b);    </span><br><span class="line">            ans += edge[i].len;    </span><br><span class="line">        }    </span><br><span class="line">    }    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-2-Prim算法"><a href="#2-2-2-Prim算法" class="headerlink" title="2.2.2. Prim算法"></a>2.2.2. Prim算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |Prim算法|</span></span><br><span class="line"><span class="comment">    |适用于稠密图|</span></span><br><span class="line"><span class="comment">    |堆优化版，时间复杂度：O(elgn)|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//优先队列自定义比较函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> {</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> <span class="keyword">const</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> {</span>  </span><br><span class="line">    <span class="keyword">int</span> v, len;  </span><br><span class="line">    node(<span class="keyword">int</span> v = <span class="number">0</span>, <span class="keyword">int</span> len = <span class="number">0</span>) :v(v), len(len) {}  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span> {  <span class="comment">// 加入队列的元素自动按距离从小到大排序  </span></span><br><span class="line">        <span class="keyword">return</span> len &gt; a.len;  </span><br><span class="line">    }  </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) {  </span><br><span class="line">        G[i].clear();  </span><br><span class="line">        dis[i] = INF;  </span><br><span class="line">        vis[i] = <span class="literal">false</span>;  </span><br><span class="line">    }  </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">(<span class="keyword">int</span> s)</span> </span>{  </span><br><span class="line">    priority_queue&lt;node&gt; Q; <span class="comment">// 定义优先队列  </span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;  </span><br><span class="line">    Q.push(node(s,<span class="number">0</span>));  <span class="comment">// 起点加入队列  </span></span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) {   </span><br><span class="line">        node now = Q.top(); </span><br><span class="line">Q.pop();  <span class="comment">// 取出距离最小的点  </span></span><br><span class="line">        <span class="keyword">int</span> v = now.v;  </span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;  <span class="comment">// 同一个节点，可能会推入2次或2次以上队列，这样第一个被标记后，剩下的需要直接跳过。  </span></span><br><span class="line">        vis[v] = <span class="literal">true</span>;  <span class="comment">// 标记一下  </span></span><br><span class="line">        ans += now.len;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++) {  <span class="comment">// 开始更新  </span></span><br><span class="line">            <span class="keyword">int</span> v2 = G[v][i].v;  </span><br><span class="line">            <span class="keyword">int</span> len = G[v][i].len;  </span><br><span class="line">            <span class="keyword">if</span> (!vis[v2] &amp;&amp; dis[v2] &gt; len) {   </span><br><span class="line">                dis[v2] = len;  </span><br><span class="line">                Q.push(node(v2, dis[v2]));  <span class="comment">// 更新的点加入队列并排序  </span></span><br><span class="line">            }  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> ans; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-单源最短路径"><a href="#2-3-单源最短路径" class="headerlink" title="2.3. 单源最短路径"></a>2.3. 单源最短路径</h3><h4 id="2-3-1-Dijkstra算法"><a href="#2-3-1-Dijkstra算法" class="headerlink" title="2.3.1. Dijkstra算法"></a>2.3.1. Dijkstra算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |Dijkstra算法|</span></span><br><span class="line"><span class="comment">    |适用于边权为正的有向图或者无向图|</span></span><br><span class="line"><span class="comment">    |求从单个源点出发，到所有节点的最短路|</span></span><br><span class="line"><span class="comment">    |优化版：时间复杂度 O(elbn)|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> {</span>  </span><br><span class="line">    <span class="keyword">int</span> v, len;  </span><br><span class="line">    node(<span class="keyword">int</span> v = <span class="number">0</span>, <span class="keyword">int</span> len = <span class="number">0</span>) :v(v), len(len) {}  </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span> {  <span class="comment">// 距离从小到大排序  </span></span><br><span class="line">        <span class="keyword">return</span> len &gt; a.len;  </span><br><span class="line">    }  </span><br><span class="line">};  </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;G[maxn];  </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];  </span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;maxn; i++) {  </span><br><span class="line">        G[i].clear();  </span><br><span class="line">        vis[i] = <span class="literal">false</span>;  </span><br><span class="line">        dis[i] = INF;  </span><br><span class="line">    }  </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>{  </span><br><span class="line">    priority_queue&lt;node&gt; Q;  </span><br><span class="line">    Q.push(node(s, <span class="number">0</span>)); <span class="comment">// 加入队列并排序  </span></span><br><span class="line">    dis[s] = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) {  </span><br><span class="line">        node now = Q.top();     <span class="comment">// 取出当前最小的  </span></span><br><span class="line">        Q.pop();  </span><br><span class="line">        <span class="keyword">int</span> v = now.v;  </span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;   <span class="comment">// 如果标记过了, 直接continue  </span></span><br><span class="line">        vis[v] = <span class="literal">true</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++) {   <span class="comment">// 更新  </span></span><br><span class="line">            <span class="keyword">int</span> v2 = G[v][i].v;  </span><br><span class="line">            <span class="keyword">int</span> len = G[v][i].len;  </span><br><span class="line">            <span class="keyword">if</span> (!vis[v2] &amp;&amp; dis[v2] &gt; dis[v] + len) {  </span><br><span class="line">                dis[v2] = dis[v] + len;  </span><br><span class="line">                Q.push(node(v2, dis[v2]));  </span><br><span class="line">            }  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> dis[e];  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-2-SPFA算法"><a href="#2-3-2-SPFA算法" class="headerlink" title="2.3.2. SPFA算法"></a>2.3.2. SPFA算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最短路径快速算法（Shortest Path Faster Algorithm）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |SPFA算法|</span></span><br><span class="line"><span class="comment">    |队列优化|</span></span><br><span class="line"><span class="comment">    |可处理负环|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; G[maxn];</span><br><span class="line"><span class="keyword">bool</span> inqueue[maxn];</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i){  </span><br><span class="line">        G[i].clear();  </span><br><span class="line">        dist[i] = INF;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e)</span>  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">int</span> v1, v2, weight;  </span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;  </span><br><span class="line">    <span class="built_in">memset</span>(inqueue, <span class="literal">false</span>, <span class="keyword">sizeof</span>(inqueue)); <span class="comment">// 标记是否在队列中  </span></span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt)); <span class="comment">// 加入队列的次数  </span></span><br><span class="line">    dist[s] = <span class="number">0</span>;  </span><br><span class="line">    Q.push(s); <span class="comment">// 起点加入队列  </span></span><br><span class="line">    inqueue[s] = <span class="literal">true</span>; <span class="comment">// 标记  </span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()){  </span><br><span class="line">        v1 = Q.front();  </span><br><span class="line">        Q.pop();  </span><br><span class="line">        inqueue[v1] = <span class="literal">false</span>; <span class="comment">// 取消标记  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v1].size(); ++i){ <span class="comment">// 搜索v1的链表  </span></span><br><span class="line">            v2 = G[v1][i].vex;  </span><br><span class="line">            weight = G[v1][i].weight;  </span><br><span class="line">            <span class="keyword">if</span>(dist[v2] &gt; dist[v1] + weight){ <span class="comment">// 松弛操作  </span></span><br><span class="line">                dist[v2] = dist[v1] + weight;  </span><br><span class="line">                <span class="keyword">if</span>(inqueue[v2] == <span class="literal">false</span>){  <span class="comment">// 再次加入队列  </span></span><br><span class="line">                    inqueue[v2] = <span class="literal">true</span>;  </span><br><span class="line">                    <span class="comment">//cnt[v2]++;  // 判负环  </span></span><br><span class="line">                    <span class="comment">//if(cnt[v2] &gt; n) return -1;  </span></span><br><span class="line">                    Q.push(v2);  </span><br><span class="line">                } } }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> dist[e];  </span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    不断的将s的邻接点加入队列，取出不断的进行松弛操作，直到队列为空  </span></span><br><span class="line"><span class="comment">    如果一个结点被加入队列超过n-1次，那么显然图中有负环  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-3-3-Floyd算法"><a href="#2-3-3-Floyd算法" class="headerlink" title="2.3.3. Floyd算法"></a>2.3.3. Floyd算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |Floyd算法|</span></span><br><span class="line"><span class="comment">    |任意点对最短路算法|</span></span><br><span class="line"><span class="comment">    |求图中任意两点的最短距离的算法|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {   <span class="comment">// 初始化为0  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;dis[i][j]);  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) {  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {  </span><br><span class="line">            dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);  </span><br><span class="line">        }  </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-二分图"><a href="#2-4-二分图" class="headerlink" title="2.4. 二分图"></a>2.4. 二分图</h3><h4 id="2-4-1-染色法"><a href="#2-4-1-染色法" class="headerlink" title="2.4.1. 染色法"></a>2.4.1. 染色法</h4> <figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |交叉染色法判断二分图|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bipartite</span><span class="params">(<span class="keyword">int</span> s)</span> </span>{  </span><br><span class="line">    <span class="keyword">int</span> u, v;  </span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;  </span><br><span class="line">    color[s] = <span class="number">1</span>;  </span><br><span class="line">    Q.push(s);  </span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) {  </span><br><span class="line">        u = Q.front();  </span><br><span class="line">        Q.pop();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i++) {  </span><br><span class="line">            v = G[u][i];  </span><br><span class="line">            <span class="keyword">if</span> (color[v] == <span class="number">0</span>) {  </span><br><span class="line">                color[v] = -color[u];  </span><br><span class="line">                Q.push(v);  </span><br><span class="line">            }  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (color[v] == color[u])  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-2-匈牙利算法"><a href="#2-4-2-匈牙利算法" class="headerlink" title="2.4.2. 匈牙利算法"></a>2.4.2. 匈牙利算法</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |求解最大匹配问题|</span></span><br><span class="line"><span class="comment">    |递归实现|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];  </span><br><span class="line"><span class="keyword">bool</span> inpath[maxn];  <span class="comment">// 标记  </span></span><br><span class="line"><span class="keyword">int</span> match[maxn];    <span class="comment">// 记录匹配对象 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span>(match));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i) {  </span><br><span class="line">        G[i].clear();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findpath</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[k].size(); ++i) {  </span><br><span class="line">        <span class="keyword">int</span> v = G[k][i];  </span><br><span class="line">        <span class="keyword">if</span> (!inpath[v]) {  </span><br><span class="line">            inpath[v] = <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">if</span> (match[v] == <span class="number">-1</span> || findpath(match[v])) { <span class="comment">// 递归  </span></span><br><span class="line">                match[v] = k; <span class="comment">// 即匹配对象是“k妹子”的  </span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            }  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hungary</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {  <span class="comment">// m为需要匹配的“妹子”数  </span></span><br><span class="line">        <span class="built_in">memset</span>(inpath, <span class="literal">false</span>, <span class="keyword">sizeof</span>(inpath)); <span class="comment">// 每次都要初始化  </span></span><br><span class="line">        <span class="keyword">if</span> (findpath(i)) cnt++;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |求解最大匹配问题|</span></span><br><span class="line"><span class="comment">    |dfs实现|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> v1, v2;  </span><br><span class="line"><span class="keyword">bool</span> Map[<span class="number">501</span>][<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">int</span> link[<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">int</span> result;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= v2; ++y) {  </span><br><span class="line">        <span class="keyword">if</span> (Map[x][y] &amp;&amp; !visit[y]) {  </span><br><span class="line">            visit[y] = <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">if</span> (link[y] == <span class="number">0</span> || dfs(link[y])) {  </span><br><span class="line">                link[y] = x;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            } </span><br><span class="line">} </span><br><span class="line">}  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search</span><span class="params">()</span>  </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= v1; x++) {  </span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));  </span><br><span class="line">        <span class="keyword">if</span> (dfs(x))  </span><br><span class="line">            result++;  </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-动态规划"><a href="#3-动态规划" class="headerlink" title="3. 动态规划"></a>3. 动态规划</h2><h3 id="3-1-背包问题"><a href="#3-1-背包问题" class="headerlink" title="3.1. 背包问题"></a>3.1. 背包问题</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |01背包|</span></span><br><span class="line"><span class="comment">    |完全背包|</span></span><br><span class="line"><span class="comment">|多重背包|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 01背包：  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bag01</span><span class="params">(<span class="keyword">int</span> cost, <span class="keyword">int</span> weight)</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span>(i = v; i &gt;= cost; --i)  </span><br><span class="line">    dp[i] = max(dp[i], dp[i - cost] + weight);  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全背包：  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(<span class="keyword">int</span> cost, <span class="keyword">int</span> weight)</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span>(i = cost; i &lt;= v; ++i)  </span><br><span class="line">    dp[i] = max(dp[i], dp[i - cost] + weight);  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重背包：  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> cost, <span class="keyword">int</span> weight, <span class="keyword">int</span> amount)</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span>(cost * amount &gt;= v)  </span><br><span class="line">        complete(cost, weight);  </span><br><span class="line">    <span class="keyword">else</span>{  </span><br><span class="line">        k = <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (k &lt; amount){  </span><br><span class="line">            bag01(k * cost, k * weight);  </span><br><span class="line">            amount -= k;  </span><br><span class="line">            k += k;  </span><br><span class="line">        }  </span><br><span class="line">        bag01(cost * amount, weight * amount);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-最长上升子序列（LIS）"><a href="#3-2-最长上升子序列（LIS）" class="headerlink" title="3.2. 最长上升子序列（LIS）"></a>3.2. 最长上升子序列（LIS）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |最长上升子序列|</span></span><br><span class="line"><span class="comment">    |状态转移|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态转移dp[i] = max{1, dp[j] + 1 };  j&lt;i; a[j]&lt;a[i];</span></span><br><span class="line"><span class="comment">    d[i]是以i结尾的最长上升子序列</span></span><br><span class="line"><span class="comment">    与i之前的 每个a[j]&lt;a[i]的 j的位置的最长上升子序列+1后的值比较</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{   <span class="comment">// 参考挑战程序设计入门经典;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){  </span><br><span class="line">        dp[i] = <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j){  </span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[i]){  </span><br><span class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);  </span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    优化方法：</span></span><br><span class="line"><span class="comment">    dp[i]表示长度为i+1的上升子序列的最末尾元素  </span></span><br><span class="line"><span class="comment">    找到第一个比dp末尾大的来代替 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line">        dp[i] = INF;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {  </span><br><span class="line">        *lower_bound(dp, dp + n, a[i]) = a[i];  <span class="comment">// 返回一个指针  </span></span><br><span class="line">    }  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *lower_bound(dp, dp + n, INF) - dp;  </span><br><span class="line">}</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    函数lower_bound()返回一个 iterator 它指向在[first,last)标记的有序序列中可以插入value，而不会破坏容器顺序的第一个位置，而这个位置标记了一个不小于value的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-最长公共子序列（LCS）"><a href="#3-3-最长公共子序列（LCS）" class="headerlink" title="3.3. 最长公共子序列（LCS）"></a>3.3. 最长公共子序列（LCS）</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |求最长公共子序列|</span></span><br><span class="line"><span class="comment">    |递推形式|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) {  </span><br><span class="line">            <span class="keyword">if</span> (s1[i] == s2[j]) {  </span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;  </span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {  </span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = max(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);  </span><br><span class="line">            } </span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h2><h3 id="4-1-kmp算法"><a href="#4-1-kmp算法" class="headerlink" title="4.1. kmp算法"></a>4.1. kmp算法</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |kmp算法|</span></span><br><span class="line"><span class="comment">    |字符串匹配|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">char</span> str[maxn], <span class="keyword">int</span> nextt[maxn])</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</span><br><span class="line">    nextt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; m) {</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || str[j] == str[k]) {</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">            nextt[j] = k;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k = nextt[k];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> a[maxn], <span class="keyword">int</span> b[maxn])</span> </span>{    </span><br><span class="line">    <span class="keyword">int</span> nextt[maxm];    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;    </span><br><span class="line">    getnext(b, nextt);    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) {    </span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || a[i] == b[j]) { <span class="comment">// 母串不动，子串移动    </span></span><br><span class="line">            j++;    </span><br><span class="line">            i++;    </span><br><span class="line">        }    </span><br><span class="line">        <span class="keyword">else</span> {    </span><br><span class="line">            <span class="comment">// i不需要回溯了    </span></span><br><span class="line">            <span class="comment">// i = i - j + 1;    </span></span><br><span class="line">            j = nextt[j];    </span><br><span class="line">        }    </span><br><span class="line">        <span class="keyword">if</span> (j == m) {    </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - m + <span class="number">1</span>); <span class="comment">// 母串的位置减去子串的长度+1    </span></span><br><span class="line">            <span class="keyword">return</span>;    </span><br><span class="line">        }    </span><br><span class="line">    }    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-kmp扩展算法"><a href="#4-2-kmp扩展算法" class="headerlink" title="4.2. kmp扩展算法"></a>4.2. kmp扩展算法</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MM = <span class="number">100005</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> next[MM], extend[MM];    </span><br><span class="line"><span class="keyword">char</span> S[MM], T[MM];    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *T)</span> </span>{    </span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(T), a = <span class="number">0</span>;    </span><br><span class="line">    next[<span class="number">0</span>] = len;    </span><br><span class="line">    <span class="keyword">while</span>(a &lt; len - <span class="number">1</span> &amp;&amp; T[a] == T[a + <span class="number">1</span>]) a++;    </span><br><span class="line">    next[<span class="number">1</span>] = a;    </span><br><span class="line">    a = <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt; len; k++) {    </span><br><span class="line">        <span class="keyword">int</span> p = a + next[a] - <span class="number">1</span>, L = next[k - a];    </span><br><span class="line">        <span class="keyword">if</span>((k - <span class="number">1</span>) + L &gt;= p) {    </span><br><span class="line">            <span class="keyword">int</span> j = (p - k + <span class="number">1</span>) &gt; <span class="number">0</span> ? (p - k + <span class="number">1</span>) : <span class="number">0</span>;    </span><br><span class="line">            <span class="keyword">while</span>(k + j &lt; len &amp;&amp; T[k + j] == T[j]) j++;    </span><br><span class="line">            next[k] = j;    </span><br><span class="line">            a = k;    </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            next[k] = L;    </span><br><span class="line">    }    </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetExtend</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *S, <span class="keyword">const</span> <span class="keyword">char</span> *T)</span> </span>{    </span><br><span class="line">    GetNext(T);    </span><br><span class="line">    <span class="keyword">int</span> slen = <span class="built_in">strlen</span>(S), tlen = <span class="built_in">strlen</span>(T), a = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">int</span> MinLen = slen &lt; tlen ? slen : tlen;    </span><br><span class="line">    <span class="keyword">while</span>(a &lt; MinLen &amp;&amp; S[a] == T[a]) a++;    </span><br><span class="line">    extend[<span class="number">0</span>] = a;     </span><br><span class="line">    a = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; slen; k++) {    </span><br><span class="line">        <span class="keyword">int</span> p = a + extend[a] - <span class="number">1</span>, L = next[k - a];    </span><br><span class="line">        <span class="keyword">if</span>((k - <span class="number">1</span>) + L &gt;= p) {    </span><br><span class="line">            <span class="keyword">int</span> j = (p - k + <span class="number">1</span>) &gt; <span class="number">0</span> ? (p - k + <span class="number">1</span>) : <span class="number">0</span>;    </span><br><span class="line">            <span class="keyword">while</span>(k + j &lt; slen &amp;&amp; j &lt; tlen &amp;&amp; S[k + j] == T[j]) j++;    </span><br><span class="line">            extend[k] = j;    </span><br><span class="line">            a = k;    </span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            extend[k] = L;    </span><br><span class="line">    }    </span><br><span class="line">}    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *s, <span class="keyword">int</span> len)</span></span>{    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="string">' '</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">}    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; S &gt;&gt; T) {    </span><br><span class="line">        GetExtend(S, T);    </span><br><span class="line">        show(next, <span class="built_in">strlen</span>(T));    </span><br><span class="line">        show(extend, <span class="built_in">strlen</span>(S));    </span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-字典树"><a href="#5-字典树" class="headerlink" title="5. 字典树"></a>5. 字典树</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span>  </span><br><span class="line">    <span class="keyword">int</span> cnt;  </span><br><span class="line">    Trie *next[maxn];  </span><br><span class="line">    Trie(){  </span><br><span class="line">        cnt = <span class="number">0</span>;  </span><br><span class="line">        <span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));  </span><br><span class="line">    }  </span><br><span class="line">};  </span><br><span class="line"></span><br><span class="line">Trie *root;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *word)</span> </span>{  </span><br><span class="line">    Trie *tem = root;  </span><br><span class="line">    <span class="keyword">while</span>(*word != <span class="string">'\0'</span>) {  </span><br><span class="line">        <span class="keyword">int</span> x = *word - <span class="string">'a'</span>;  </span><br><span class="line">        <span class="keyword">if</span>(tem-&gt;next[x] == <span class="literal">NULL</span>)  </span><br><span class="line">            tem-&gt;next[x] = <span class="keyword">new</span> Trie;  </span><br><span class="line">        tem = tem-&gt;next[x];  </span><br><span class="line">        tem-&gt;cnt++;  </span><br><span class="line">        word++;  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">char</span> *word)</span> </span>{  </span><br><span class="line">    Trie *tem = root;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; word[i] != <span class="string">'\0'</span>; i++) {  </span><br><span class="line">        <span class="keyword">int</span> x = word[i]-<span class="string">'a'</span>;  </span><br><span class="line">        <span class="keyword">if</span>(tem-&gt;next[x] == <span class="literal">NULL</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        tem = tem-&gt;next[x];  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> tem-&gt;cnt;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">char</span> *word, <span class="keyword">int</span> t)</span> </span>{  </span><br><span class="line">    Trie *tem = root;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; word[i] != <span class="string">'\0'</span>; i++) {  </span><br><span class="line">        <span class="keyword">int</span> x = word[i]-<span class="string">'a'</span>;  </span><br><span class="line">        tem = tem-&gt;next[x];  </span><br><span class="line">        (tem-&gt;cnt) -= t;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)  </span><br><span class="line">        tem-&gt;next[i] = <span class="literal">NULL</span>;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">int</span> n;  </span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">50</span>];  </span><br><span class="line">    <span class="keyword">char</span> str2[<span class="number">50</span>];  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF) {  </span><br><span class="line">        root = <span class="keyword">new</span> Trie;  </span><br><span class="line">        <span class="keyword">while</span>(n--) {  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, str1, str2);  </span><br><span class="line">            <span class="keyword">if</span>(str1[<span class="number">0</span>] == <span class="string">'i'</span>) {</span><br><span class="line">                Insert(str2); </span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str1[<span class="number">0</span>] == <span class="string">'s'</span>) {  </span><br><span class="line">                <span class="keyword">if</span>(Search(str2))  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);  </span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"No\n"</span>);  </span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {  </span><br><span class="line">                <span class="keyword">int</span> t = Search(str2);  </span><br><span class="line">                <span class="keyword">if</span>(t)  </span><br><span class="line">                    Delete(str2, t);  </span><br><span class="line">            } </span><br><span class="line">        } </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-线段树"><a href="#6-线段树" class="headerlink" title="6. 线段树"></a>6. 线段树</h2><h3 id="6-1-点更新"><a href="#6-1-点更新" class="headerlink" title="6.1. 点更新"></a>6.1. 点更新</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">int</span> max, sum;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">node tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//m 是 树的标号</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    tree[m].left = l;</span><br><span class="line">    tree[m].right = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) {</span><br><span class="line">        tree[m].max = a[l];</span><br><span class="line">        tree[m].sum = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(m &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tree[m].max = max(tree[m &lt;&lt; <span class="number">1</span>].max, tree[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">    tree[m].sum = tree[m &lt;&lt; <span class="number">1</span>].sum + tree[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> a, <span class="keyword">int</span> val)</span><span class="comment">//a 是 节点位置， val 是 更新的值（加减的值）</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (tree[m].left == a &amp;&amp; tree[m].right == a) {</span><br><span class="line">        tree[m].max += val;</span><br><span class="line">        tree[m].sum += val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[m].left + tree[m].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= mid) {</span><br><span class="line">        update(m &lt;&lt; <span class="number">1</span>, a, val);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        update(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, a, val);</span><br><span class="line">    }</span><br><span class="line">    tree[m].max = max(tree[m &lt;&lt; <span class="number">1</span>].max, tree[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">    tree[m].sum = tree[m &lt;&lt; <span class="number">1</span>].sum + tree[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == tree[m].left &amp;&amp; r == tree[m].right) {</span><br><span class="line">        <span class="keyword">return</span> tree[m].sum;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[m].left + tree[m].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) {</span><br><span class="line">        <span class="keyword">return</span> querySum(m &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) {</span><br><span class="line">        <span class="keyword">return</span> querySum(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> querySum(m &lt;&lt; <span class="number">1</span>, l, mid) + querySum(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l == tree[m].left &amp;&amp; r == tree[m].right) {</span><br><span class="line">        <span class="keyword">return</span> tree[m].max;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[m].left + tree[m].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) {</span><br><span class="line">        <span class="keyword">return</span> queryMax(m &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) {</span><br><span class="line">        <span class="keyword">return</span> queryMax(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max(queryMax(m &lt;&lt; <span class="number">1</span>, l, mid), queryMax(m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">build(<span class="number">1</span>, <span class="number">1</span>, n);  </span><br><span class="line">update(<span class="number">1</span>, a, b);  </span><br><span class="line">query(<span class="number">1</span>, a, b);</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-区间更新"><a href="#6-2-区间更新" class="headerlink" title="6.2. 区间更新"></a>6.2. 区间更新</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,n,q;  </span><br><span class="line">ll anssum;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span>  </span><br><span class="line">    ll l, r;  </span><br><span class="line">    ll addv, sum;  </span><br><span class="line">}tree[maxn &lt;&lt; <span class="number">2</span>];  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span>(tree[id].l &gt;= tree[id].r)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    tree[id].sum = tree[id &lt;&lt; <span class="number">1</span>].sum + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span>(tree[id].l &gt;= tree[id].r)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">if</span>(tree[id].addv){  </span><br><span class="line">        <span class="keyword">int</span> tmp = tree[id].addv;  </span><br><span class="line">        tree[id &lt;&lt; <span class="number">1</span>].addv += tmp;  </span><br><span class="line">        tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].addv += tmp;  </span><br><span class="line">        tree[id &lt;&lt; <span class="number">1</span>].sum += (tree[id &lt;&lt; <span class="number">1</span>].r - tree[id &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>) * tmp;  </span><br><span class="line">        tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += (tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>) * tmp;  </span><br><span class="line">        tree[id].addv = <span class="number">0</span>;  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, ll l, ll r)</span> </span>{  </span><br><span class="line">    tree[id].l = l;  </span><br><span class="line">    tree[id].r = r;  </span><br><span class="line">    tree[id].addv = <span class="number">0</span>;  </span><br><span class="line">    tree[id].sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(l == r) {  </span><br><span class="line">        tree[id].sum = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    }  </span><br><span class="line">    ll mid = (l + r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    build(id &lt;&lt; <span class="number">1</span>, l, mid);  </span><br><span class="line">    build(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);  </span><br><span class="line">    maintain(id);  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAdd</span><span class="params">(<span class="keyword">int</span> id,ll l,ll r,ll val)</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span>(tree[id].l &gt;= l &amp;&amp; tree[id].r &lt;= r)  </span><br><span class="line">    {  </span><br><span class="line">        tree[id].addv += val;  </span><br><span class="line">        tree[id].sum += (tree[id].r - tree[id].l + <span class="number">1</span>) * val;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    }  </span><br><span class="line">    pushdown(id);  </span><br><span class="line">    ll mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)  </span><br><span class="line">        updateAdd(id &lt;&lt; <span class="number">1</span>, l, r, val);  </span><br><span class="line">    <span class="keyword">if</span>(mid &lt; r)  </span><br><span class="line">        updateAdd(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);  </span><br><span class="line">    maintain(id);  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, ll l, ll r)</span> </span>{  </span><br><span class="line">    <span class="keyword">if</span>(tree[id].l &gt;= l &amp;&amp; tree[id].r &lt;= r){  </span><br><span class="line">        anssum += tree[id].sum;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    }  </span><br><span class="line">    pushdown(id);  </span><br><span class="line">    ll mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)  </span><br><span class="line">        query(id &lt;&lt; <span class="number">1</span>, l, r);  </span><br><span class="line">    <span class="keyword">if</span>(mid &lt; r)  </span><br><span class="line">        query(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);  </span><br><span class="line">    maintain(id);  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);  </span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(t--) {  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);  </span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);  </span><br><span class="line">        <span class="keyword">int</span> id;  </span><br><span class="line">        ll x, y;  </span><br><span class="line">        ll val;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++kase);  </span><br><span class="line">        <span class="keyword">while</span>(q--) {  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);  </span><br><span class="line">            <span class="keyword">if</span>(id == <span class="number">0</span>) {  </span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;x, &amp;y, &amp;val);  </span><br><span class="line">                updateAdd(<span class="number">1</span>, x + <span class="number">1</span>, y + <span class="number">1</span>, val);  </span><br><span class="line">            }  </span><br><span class="line">            <span class="keyword">else</span> {  </span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;x, &amp;y);  </span><br><span class="line">                anssum = <span class="number">0</span>;  </span><br><span class="line">                query(<span class="number">1</span>, x + <span class="number">1</span>, y + <span class="number">1</span>);  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, anssum);  </span><br><span class="line">            } </span><br><span class="line">        } </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-树状数组"><a href="#7-树状数组" class="headerlink" title="7. 树状数组"></a>7. 树状数组</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> t &amp; (-t);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (t &lt;= n){</span><br><span class="line">        a[t] += d;</span><br><span class="line">        t = t + lowbit(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t &gt; <span class="number">0</span>){</span><br><span class="line">        sum += a[t];</span><br><span class="line">        t = t - lowbit(t);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t, k, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    k= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--){</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">            insert(i, d);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, k++);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) {</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">"End"</span>)   <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">"Query"</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getSum(y) - getSum(x - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Add"</span>)</span><br><span class="line">                insert(x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Sub"</span>)</span><br><span class="line">                insert(x, -y);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求逆序对</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">node[i].index = i;</span><br><span class="line">node[i].v = a;</span><br><span class="line">}</span><br><span class="line">sort(node + <span class="number">1</span>, node + <span class="number">1</span> + n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">{ </span><br><span class="line">add(node[i].index);  <span class="comment">//离散化结果—— 下标等效于数值</span></span><br><span class="line">ans += i - sum(node[i].index); <span class="comment">//得到之前有多少个比你大的数（逆序对）</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br></pre></td></tr></tbody></table></figure><h2 id="8-中国剩余定理（孙子定理）"><a href="#8-中国剩余定理（孙子定理）" class="headerlink" title="8. 中国剩余定理（孙子定理）"></a>8. 中国剩余定理（孙子定理）</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m[], <span class="keyword">int</span> n)</span>  </span>{    </span><br><span class="line">    <span class="keyword">int</span> M = <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)    </span><br><span class="line">        M *= m[i];    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  {    </span><br><span class="line">        <span class="keyword">int</span> x, y;    </span><br><span class="line">        <span class="keyword">int</span> Mi = M / m[i];    </span><br><span class="line">        extend_Euclid(Mi, m[i], x, y);    </span><br><span class="line">        ans = (ans + Mi * x * a[i]) % M;    </span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">if</span>(ans &lt; <span class="number">0</span>) ans += M;    </span><br><span class="line">    <span class="keyword">return</span> ans;    </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend_Euclid</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span>  </span>{  </span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) {  </span><br><span class="line">        x = <span class="number">1</span>;  </span><br><span class="line">        y = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    }  </span><br><span class="line">    extend_Euclid(b, a % b, x, y);  </span><br><span class="line">    <span class="keyword">int</span> tmp = x;  </span><br><span class="line">    x = y;  </span><br><span class="line">    y = tmp - (a / b) * y;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="9-最大流-最大权闭合子图"><a href="#9-最大流-最大权闭合子图" class="headerlink" title="9. 最大流/最大权闭合子图"></a>9. 最大流/最大权闭合子图</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从源点s向每个正权点连一条容量为权值的边，每个负权点向汇点t连一条容量为权值的绝对值的边，有向图原来的边容量全部为无限大。</span></span><br><span class="line"><span class="comment">//最大权闭合子图=（正权之和-不选的正权之和-要选的负权绝对值之和）=正权值和-最小割/最大流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5010     <span class="comment">//课程</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 50100    <span class="comment">//用户</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> {</span>  </span><br><span class="line">    <span class="keyword">int</span> v, c, next;  </span><br><span class="line">    Edge(<span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> next): v(v), c(c), next(next) {}  </span><br><span class="line">    Edge(){}  </span><br><span class="line">}e[maxm * <span class="number">6</span> + maxn * <span class="number">2</span>];  </span><br><span class="line"><span class="keyword">int</span> p[maxn + maxm];  </span><br><span class="line"><span class="keyword">int</span> cnt, n, m, T;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{  </span><br><span class="line">    cnt = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, <span class="keyword">sizeof</span>(p));  </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>{  </span><br><span class="line">    e[cnt] = Edge(v, c, p[u]);  </span><br><span class="line">    p[u] = cnt++;  <span class="comment">// 顶点u的上一条相邻的边 </span></span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn + maxm];  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span>(d));  </span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;  </span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    q.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {  </span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = p[u]; i != <span class="number">-1</span>; i = e[i].next) {  </span><br><span class="line">            <span class="keyword">int</span> v = e[i].v;  </span><br><span class="line">            <span class="keyword">if</span>(e[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == <span class="number">-1</span>){  </span><br><span class="line">                <span class="comment">//printf("%d-&gt;%d(%d)\n", u, v, d[u] + 1);  </span></span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;  </span><br><span class="line">                q.push(v);  </span><br><span class="line">            }  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> d[T] != <span class="number">-1</span>;  </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span>{  </span><br><span class="line">    <span class="keyword">if</span>(u == T)</span><br><span class="line">        <span class="keyword">return</span> flow;  </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p[u]; i != <span class="number">-1</span>; i = e[i].next){  </span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;  </span><br><span class="line">        <span class="keyword">if</span>(e[i].c &gt; <span class="number">0</span> &amp;&amp; d[v] == d[u] + <span class="number">1</span>){  </span><br><span class="line">            <span class="keyword">int</span> tmp = dfs(v, min(flow, e[i].c));  </span><br><span class="line">            e[i].c -= tmp;  </span><br><span class="line">            flow -= tmp;  </span><br><span class="line">            e[i^<span class="number">1</span>].c += tmp;  </span><br><span class="line">            res += tmp;  </span><br><span class="line">            <span class="keyword">if</span>(flow == <span class="number">0</span>)  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0</span>)  </span><br><span class="line">        d[u] = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>{  </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(bfs()){  </span><br><span class="line">   <span class="comment">// printf("here!\n");  </span></span><br><span class="line">        res += dfs(<span class="number">0</span>, inf);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{  </span><br><span class="line">    init();  </span><br><span class="line">    <span class="keyword">int</span> p, a, b, c, sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);  </span><br><span class="line">    T = n + m + <span class="number">1</span>;<span class="comment">//汇点  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++){  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);  </span><br><span class="line">        insert(i + m, T, p);  <span class="comment">//课程放右边</span></span><br><span class="line">        insert(T, i + m, <span class="number">0</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++){  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);  </span><br><span class="line">        sum += c;  </span><br><span class="line">        insert(i, a + m, inf);   </span><br><span class="line">        insert(a + m, i, <span class="number">0</span>);  </span><br><span class="line">        insert(i, b + m, inf);  </span><br><span class="line">        insert(b + m, i, <span class="number">0</span>);  </span><br><span class="line">        insert(<span class="number">0</span>, i, c);   <span class="comment">//用户放左边</span></span><br><span class="line">        insert(i, <span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum - dinic());  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="10-拓扑排序-AOE网络-关键路径"><a href="#10-拓扑排序-AOE网络-关键路径" class="headerlink" title="10. 拓扑排序/AOE网络/关键路径"></a>10. 拓扑排序/AOE网络/关键路径</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; child;</span></span><br><span class="line"><span class="keyword">int</span> id; </span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//Node graph[maxn]; </span></span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; Adj[maxn];</span><br><span class="line"><span class="comment">//int e[maxn]; //边上活动最早开始时间 </span></span><br><span class="line"><span class="comment">//int l[maxn]; //边上活动最晚开始时间</span></span><br><span class="line"><span class="keyword">int</span> ve[maxn];   <span class="comment">//顶点上活动最早开始时间 </span></span><br><span class="line"><span class="keyword">int</span> vl[maxn];  <span class="comment">//顶点上活动最晚开始时间</span></span><br><span class="line"><span class="keyword">int</span> in[maxn];  <span class="comment">// 每个结点的入度，为0时入队</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TopologicalSort</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(ve, <span class="number">0</span>, <span class="keyword">sizeof</span>(ve));</span><br><span class="line"><span class="comment">//memset(inq,0,sizeof(inq));</span></span><br><span class="line"><span class="comment">/*先找出所有初始时入度为0的结点*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)  </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">q.push(i);</span><br><span class="line"><span class="comment">//s.push(i);</span></span><br><span class="line"><span class="comment">//inq[i] = true;</span></span><br><span class="line"><span class="comment">//ve[i] = 0; </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*每次将所有入度为0的结点入栈，拓扑序*/</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tmp = q.front();</span><br><span class="line">q.pop();    </span><br><span class="line">s.push(tmp); <span class="comment">// num++；</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "tmp:" &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[tmp].size(); i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> id = Adj[tmp][i].id;</span><br><span class="line"><span class="keyword">if</span>(--in[id] == <span class="number">0</span>) <span class="comment">//入度减为0 加入拓扑排序 </span></span><br><span class="line">{</span><br><span class="line">q.push(id);</span><br><span class="line"><span class="comment">//s.push(i);</span></span><br><span class="line"><span class="comment">//inq[i]=true;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ve[tmp] + Adj[tmp][i].length &gt; ve[id]) <span class="comment">//更新ve值 </span></span><br><span class="line">ve[id] = ve[tmp] + Adj[tmp][i].length;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> } </span><br><span class="line"> <span class="comment">//cout &lt;&lt; "size: " &lt;&lt; s.size() &lt;&lt; endl;</span></span><br><span class="line"> <span class="keyword">if</span>(s.size() == N) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_path</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(TopologicalSort(N) == <span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"> <span class="comment">/*寻找拓扑序列最后一个结点，即开始时间最晚的一个结点*/</span></span><br><span class="line"> <span class="keyword">int</span> max = <span class="number">-1</span>, u = <span class="number">-1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">if</span>(ve[i] &gt; max)</span><br><span class="line">   {</span><br><span class="line">    max = ve[i];</span><br><span class="line">    u = i;</span><br><span class="line">   } </span><br><span class="line"> }</span><br><span class="line">  <span class="comment">//fill(vl, vl + maxn, INF); </span></span><br><span class="line">  <span class="comment">//vl[u] = ve[u];</span></span><br><span class="line">  fill(vl, vl + maxn, ve[u]); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ve[u]);</span><br><span class="line">  </span><br><span class="line"> <span class="comment">/*元素逐个出栈，即为逆拓扑序列，构造vl数组*/</span></span><br><span class="line"> <span class="keyword">while</span>(!s.empty())</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">int</span> tmp = s.top();</span><br><span class="line"> s.pop();</span><br><span class="line"> <span class="comment">//int min = INF, u;</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[tmp].size(); i++)</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">int</span> id = Adj[tmp][i].id;</span><br><span class="line"> <span class="keyword">if</span>(vl[id] - Adj[tmp][i].length &lt; vl[tmp])</span><br><span class="line"> {</span><br><span class="line"> vl[tmp] = vl[id] - Adj[tmp][i].length;</span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"> <span class="comment">/*遍历邻接点每条边，计算每项活动的最早和最晚开始时间*/</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j = Adj[i].size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">int</span> id = Adj[i][j].id;</span><br><span class="line"> <span class="keyword">int</span> e = ve[i];</span><br><span class="line"> <span class="keyword">int</span> l = vl[id]-Adj[i][j].length;</span><br><span class="line"> <span class="keyword">if</span>(e == l) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-&gt;%d\n"</span>, i, id); </span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"> } </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;M) != EOF)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> v, w, len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">Adj[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;v, &amp;w, &amp;len);</span><br><span class="line">Node tmp;</span><br><span class="line">tmp.id = w;</span><br><span class="line">tmp.length = len;</span><br><span class="line">Adj[v].push_back(tmp); <span class="comment">//有向图只要添加单向边即可 </span></span><br><span class="line">in[w]++; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">s.pop();</span><br><span class="line">calc_path(N);</span><br><span class="line"><span class="comment">//cout &lt;&lt; "end!!" &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-强连通分量"><a href="#11-强连通分量" class="headerlink" title="11. 强连通分量"></a>11. 强连通分量</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">} tu[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="keyword">int</span> ip;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N];<span class="comment">///dfn[]表示深搜的步数，low[u]表示u或u的子树能够追溯到的最早的栈中节点的次序号</span></span><br><span class="line"><span class="keyword">int</span> sccno[N];<span class="comment">///缩点数组，表示某个点对应的缩点值</span></span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line"><span class="keyword">int</span> scc_cnt;<span class="comment">///强连通分量个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ip=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    tu[ip].to = v;</span><br><span class="line">    tu[ip].next = head[u];</span><br><span class="line">    head[u] = ip++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scc[N];<span class="comment">///得出来的缩点，scc[i]里面存i这个缩点具体缩了哪些点</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    dfn[u] = low[u] = ++step;</span><br><span class="line">    S.push(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = tu[i].next)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> v = tu[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        {</span><br><span class="line">            dfs(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[v])</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u])</span><br><span class="line">    {</span><br><span class="line">        scc_cnt += <span class="number">1</span>;</span><br><span class="line">        scc[scc_cnt].clear();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            <span class="keyword">if</span> (sccno[x] != scc_cnt) </span><br><span class="line">scc[scc_cnt].push_back(x);</span><br><span class="line">            sccno[x] = scc_cnt;</span><br><span class="line">            <span class="keyword">if</span> (x == u) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(sccno, <span class="number">0</span>, <span class="keyword">sizeof</span>(sccno));</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</span><br><span class="line">    step = scc_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) </span><br><span class="line">dfs(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12-日期与星期-蔡勒公式"><a href="#12-日期与星期-蔡勒公式" class="headerlink" title="12. 日期与星期/蔡勒公式"></a>12. 日期与星期/蔡勒公式</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDayofWeek</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span> || m == <span class="number">2</span>) {</span><br><span class="line">        m += <span class="number">12</span>;</span><br><span class="line">        y--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span> + <span class="number">1</span>) % <span class="number">7</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://blog.csdn.net/qq_32265245/article/details/53046750" target="_blank" rel="noopener">ACM算法模板</a></p></li><li><p><a href="https://blog.csdn.net/m0_38033475/article/details/80173037" target="_blank" rel="noopener">dinic求最大权闭合子图</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42584977/article/details/92001428" target="_blank" rel="noopener">拓扑排序+AOE网络+关键路径</a></p></li><li><p><a href="https://blog.csdn.net/martinue/article/details/51315574" target="_blank" rel="noopener">tarjan模板</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E8%94%A1%E5%8B%92%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">蔡勒公式</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 机试 </tag>
            
            <tag> 编程 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于弄好博客啦</title>
      <link href="/first-article/"/>
      <url>/first-article/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在十一这一天，断断续续地终于把博客建好了，感谢这位dalao的教程<a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a>!</p></blockquote><p>其实弄个博客的初衷还是自己想平时写点东西，或者是记录一些经历或者感悟，又或是平时工作学习时记录一些东西。<br>不过目前水平有限，可能技术上的东西比重还是会偏少一些。但不管写些什么，重要的还是自己要开始坚持写点东西。</p><p>接下来首先想写的，一个是保研方面的一些经历感悟，再一个可能就是平时看论文写代码时做的一些笔记，也不立什么flag了，就希望这个博客能一直更新下去吧。</p><p>最后还是祝祖国母亲70岁生日快乐呀！😀</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new "My New Post"</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
